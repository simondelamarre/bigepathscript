!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.pathScript=t():e.pathScript=t()}(self,(function(){return(()=>{"use strict";var e={581:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.animateScroll=void 0,t.animateScroll=(e,t,o,n,a,r)=>new Promise((function(i,l){try{const l=a-o,s=n-t;let c=0;const A=20;Math.easeInOutQuad=function(e,t,o,n){return(e/=n/2)<1?o/2*e*e+t:-o/2*(--e*(e-2)-1)+t};const u=function(){c+=A;const n=Math.easeInOutQuad(c,t,s,e),a=Math.easeInOutQuad(c,o,l,e);window.scroll(a,n),c<e?setTimeout(u,A):(r&&r({message:"complete"}),i({message:"complete"}))}.bind(this);u()}catch(e){l(e)}}))},275:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(a,r){function i(e){try{s(n.next(e))}catch(e){r(e)}}function l(e){try{s(n.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,l)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=o(581);t.default=(e=100)=>!scroll||new Promise(((t,o)=>n(void 0,void 0,void 0,(function*(){try{let o=document.body.scrollHeight;const n=function(){setTimeout((function(){o===document.body.scrollHeight?t({status:"complete"}):(o=document.body.scrollHeight,a.animateScroll(e,window.scrollY,window.scrollX,o,0,n))}),100+e)};a.animateScroll(e,window.scrollY,window.scrollX,o,0,n)}catch(e){o(e)}}))))},494:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(a,r){function i(e){try{s(n.next(e))}catch(e){r(e)}}function l(e){try{s(n.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,l)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=o(581);t.default=e=>new Promise(((t,o)=>n(void 0,void 0,void 0,(function*(){if(e){const n=yield a.animateScroll(100,window.scrollY,window.scrollX,window.scrollY+e.getBoundingClientRect().y,window.scrollX+e.getBoundingClientRect().x,null);n?t(n):o(n)}else t(!0)}))))},9:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(a,r){function i(e){try{s(n.next(e))}catch(e){r(e)}}function l(e){try{s(n.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,l)}s((n=n.apply(e,t||[])).next())}))},a=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,o=e[Symbol.asyncIterator];return o?o.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(o){t[o]=e[o]&&function(t){return new Promise((function(n,a){!function(e,t,o,n){Promise.resolve(n).then((function(t){e({value:t,done:o})}),t)}(n,a,(t=e[o](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.helloPuppeteer=t.waitasecond=t.getItem=t.processListItem=t.processScrollToBottom=t.processLoadMoreButton=t.bigePath=void 0;const r=o(275),i=o(494),l=o(677);t.bigePath=(e,o)=>n(void 0,void 0,void 0,(function*(){return console.log("bigePath"),new Promise((r=>n(void 0,void 0,void 0,(function*(){var n,i;console.log("in promise");const l={static:{url:window.location.href},list:[],pages:0,message:"hello"};console.log("let try");try{if(l.message="try",e.static)for(const t of e.static){const e=document.querySelector(t.selector);e&&(l.static[t.label]=e.textContent)}if(console.log("static passed"),l.message="static passed",console.log("setup.navigation ",e.navigation),!e.navigation)return o({response:l}),r(l),l;if(l.message="has navigation "+e.navigation,"loadMore"===e.navigation.mode)console.log("load more nav mode"),l.message="waiting parser loadmore",console.log("waiting parser loadmore wait a second"),yield t.waitasecond(500),console.log("waiting parser loadmore wait a second AFTER"),yield t.processLoadMoreButton(e,l.list,0,(function(e,t){return console.log("processed ",e),l.list=e,l.pages=t,e})),l.message="processLoadMoreButton processed",console.log("will resolve"),r(l);else if("scrollToBottom"===e.navigation.mode)l.message="waiting parser processScrollToBottom",l.list=yield t.processScrollToBottom(e,l.list,(function(e){return e})),r(l);else if("nextButton"===e.navigation.mode){l.message="waiting parser processScrollToBottom";try{for(var s,c=a(e.lists);!(s=yield c.next()).done;){const e=s.value;l.list=l.list.concat(l.list,yield t.processListItem(e.target.selector))}}catch(e){n={error:e}}finally{try{s&&!s.done&&(i=c.return)&&(yield i.call(c))}finally{if(n)throw n.error}}r(l)}}catch(e){return console.log("has error"),o({response:l,err:e}),r(l),{error:e,message:"wrong path setup"}}o({response:l})}))))})),t.processLoadMoreButton=(e,o,r,i)=>n(void 0,void 0,void 0,(function*(){var n,l;console.log("processLoadMoreButton ",o,e.lists);try{for(var s,c=a(e.lists);!(s=yield c.next()).done;){const e=s.value,n=yield t.processListItem(e.target.selector);console.log("news ?? ",n,o),o=o.concat(n)}}catch(e){n={error:e}}finally{try{s&&!s.done&&(l=c.return)&&(yield l.call(c))}finally{if(n)throw n.error}}const A=document.querySelector(e.navigation.loadMoreSelector);if(!A)return i(o,r),o;A.click(),setTimeout((function(){r++,t.processLoadMoreButton(e,o,r,i)}),1e3)})),t.processScrollToBottom=(e,o,i)=>n(void 0,void 0,void 0,(function*(){var n,l;yield r.default(200);try{for(var s,c=a(e.lists);!(s=yield c.next()).done;){const e=s.value;o=o.concat(o,yield t.processListItem(e.target.selector))}}catch(e){n={error:e}}finally{try{s&&!s.done&&(l=c.return)&&(yield l.call(c))}finally{if(n)throw n.error}}return i(o),o})),t.processListItem=e=>{let o=[];return new Promise(((r,i)=>n(void 0,void 0,void 0,(function*(){var n,l;const s=document.querySelectorAll(e);try{try{for(var c,A=a(s);!(c=yield A.next()).done;){const e=c.value;if(!e.classList.contains("processed")){const n=yield t.getItem(e);n&&o.push(n),e.classList.add("processed")}}}catch(e){n={error:e}}finally{try{c&&!c.done&&(l=A.return)&&(yield l.call(A))}finally{if(n)throw n.error}}r(o)}catch(e){i(e)}}))))},t.getItem=e=>new Promise(((t,o)=>n(void 0,void 0,void 0,(function*(){try{if(e.classList.contains("bigeProcessed"))t(null);else{yield i.default(e),e.classList.add("bigeProcessed");const o=yield l.default(e);t(o)}}catch(e){o("fail")}})))),t.waitasecond=e=>n(void 0,void 0,void 0,(function*(){return new Promise((t=>n(void 0,void 0,void 0,(function*(){setTimeout((function(){t(!0)}),e)}))))})),t.helloPuppeteer=e=>n(void 0,void 0,void 0,(function*(){return`hello ${e}`})),window.bigePath=t.bigePath,window.helloPuppeteer=t.helloPuppeteer,window.scrollToBottom=r.default},231:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=o(278);t.default=(e,t)=>{let o="";if(!e)return"";const a=n.default(e);for(const e of Object.keys(a))-1!==e.indexOf(t)&&(o=a[e]);return o}},278:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=["class","style","data-widths","data-sizes","sizes","srcset","method","enctype","type","disabled","x","y","width","height","viewBox","fill","stroke-width","stroke-linecap","stroke-miterlimit","d","version","xmlns","xmlns:xlink","xml:space","transform","data-swaction","data-test","checked","data-image-widths","aria-hidden"];t.default=e=>{const t={};for(const n of e.attributes)o.includes(n.name)||(t[n.name]=n.value);const n=e.querySelectorAll("*");for(const e of n)for(const n of e.attributes)o.includes(n.name)||(t[n.name]=n.value);return t}},627:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t=e.querySelectorAll("a");if(t.length>0){const e=[];for(const o of t)o.getAttribute("href")&&-1===o.getAttribute("href").indexOf("javascript")&&e.push(o.getAttribute("href"));return e.length>1&&e.sort(((e,t)=>e.length-t.length)),e[0]}return""}},869:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t={},o=e.querySelectorAll("[itemprop]");for(const e of o)t[e.attributes.itemprop.value]=e.attributes.content?e.attributes.content.value:"";return t}},982:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>[]},746:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{e=e.replace(/\s/g,"");const t=[];try{const o=new RegExp("(\\d?\\d?)%","g"),n=e.match(o);if(n)for(const e of n)t.push({operator:e.match(/\+/g)?"+":"-",amount:e.match(/\d+/g)?e.match(/\d+/g)[0]:0,reducer:"%"})}catch(e){console.error("Probably invalid regular expression ",e)}return t}},407:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t=[];try{const o=e.querySelectorAll("img");for(const e of o)try{let o="";e.attributes.alt&&(o=e.attributes.alt.value);let n="";e.attributes.src&&(n=e.attributes.src.value);const a=e.attributes["data-srcset"];if(console.log("dataSrcSet ",a),a){const e=a.value.split(",");console.log("srcSetList ",e);for(let o of e){const e=o.split(" ")[0];-1===t.findIndex((t=>t.url===e))&&t.push({url:e,description:"no-description"})}}const r=e.attributes.srcset;if(r){const e=r.value.split(",");for(let o of e){const e=o.split(" ")[0];-1===t.findIndex((t=>t.url===e))&&t.push({url:e,description:"no-description"})}}-1===t.findIndex((e=>e.url===n))&&t.push({url:n,description:o||"no-description"})}catch(e){console.error("ERROR in pictures selector loop")}}catch(e){console.error("ERROR PICTuRe LIST ::: ",e)}return t}},906:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getDevise=void 0;const o=["EUR"," EUR"," €","€","€‌","EURO","EUROS","AFN","AFGHANI","ALL","LEK","DZD","ALGERIAN DINAR","USD","US DOLLAR","$","AOA","KWANZA","XCD","EAST CARIBBEAN DOLLAR","ARS","ARGENTINE PESO","AMD","ARMENIAN DRAM","AWG","ARUBAN FLORIN","Ƒ","AUD","AUSTRALIAN DOLLAR","AZN","AZERBAIJANIAN MANAT","₼","BSD","BAHAMIAN DOLLAR","BHD","BAHRAINI DINAR","BDT","TAKA","BBD","BARBADOS DOLLAR","BYN","BELARUSSIAN RUBLE","BR","BZD","BELIZE DOLLAR","BZ\\$","XOF","CFA FRANC BCEAO","BMD","BERMUDIAN DOLLAR","BTN","NGULTRUM","INR","INDIAN RUPEE","","BOB","BOLIVIANO","$B","BOV","MVDOL","BAM","؋","CONVERTIBLE MARK","KM","BWP","PULA","NOK","NORWEGIAN KRONE","KR","BRL","BRAZILIAN REAL","R\\$","BND","BRUNEI DOLLAR","BGN","BULGARIAN LEV","ЛВ","BIF","BURUNDI FRANC","CVE","CABO VERDE ESCUDO","KHR","RIEL","៛","XAF","CFA FRANC BEAC","CAD","CANADIAN DOLLAR","KYD","CAYMAN ISLANDS DOLLAR","CLF","UNIDAD DE FOMENTO","CLP","CHILEAN PESO","CNY","YUAN RENMINBI","¥","COP","COLOMBIAN PESO","COU","UNIDAD DE VALOR REAL","KMF","COMORO FRANC","CDF","CONGOLESE FRANC","NZD","NEW ZEALAND DOLLAR","CRC","COSTA RICAN COLON","₡","HRK","KUNA","KN","CUC","PESO CONVERTIBLE","CUP","CUBAN PESO","₱","ANG","NETHERLANDS ANTILLEAN GUILDER","Ƒ","CZK","CZECH KORUNA","KČ","DKK","DANISH KRONE","KR","DJF","DJIBOUTI FRANC","DOP","DOMINICAN PESO","RD\\$","EGP","EGYPTIAN POUND","£","SVC","EL SALVADOR COLON","ERN","NAKFA","ETB","ETHIOPIAN BIRR","FKP","FALKLAND ISLANDS POUND","£","FJD","FIJI DOLLAR","XPF","CFP FRANC","GMD","DALASI","GEL","LARI","GHS","GHANA CEDI","¢","GIP","GIBRALTAR POUND","£","GTQ","QUETZAL","Q","GBP","POUND STERLING","£","GNF","GUINEA FRANC","GYD","GUYANA DOLLAR","HTG","GOURDE","HNL","LEMPIRA","L","HKD","HONG KONG DOLLAR","HUF","FORINT","FT","ISK","ICELAND KRONA","KR","IDR","RUPIAH","RP","XDR","SDR (SPECIAL DRAWING RIGHT)","IRR","IRANIAN RIAL","﷼","IQD","IRAQI DINAR","ILS","NEW ISRAELI SHEQEL","₪","JMD","JAMAICAN DOLLAR","J\\$","JPY","YEN","¥","JOD","JORDANIAN DINAR","KZT","TENGE","ЛВ","KES","KENYAN SHILLING","KPW","NORTH KOREAN WON","₩","KRW","WON","₩","KWD","KUWAITI DINAR","KGS","SOM","ЛВ","LAK","KIP","₭","LBP","LEBANESE POUND","£","LSL","LOTI","ZAR","RAND","R","LRD","LIBERIAN DOLLAR","LYD","LIBYAN DINAR","CHF","SWISS FRANC","MOP","PATACA","MGA","MALAGASY ARIARY","MWK","KWACHA","MYR","MALAYSIAN RINGGIT","RM","MVR","RUFIYAA","MRU","OUGUIYA","MUR","MAURITIUS RUPEE","₨","XUA","ADB UNIT OF ACCOUNT","MXN","MEXICAN PESO","MXV","MEXICAN UNIDAD DE INVERSION (UDI)","MDL","MOLDOVAN LEU","MNT","TUGRIK","₮","MAD","MOROCCAN DIRHAM","MZN","MOZAMBIQUE METICAL","MT","MMK","KYAT","NAD","NAMIBIA DOLLAR","NPR","NEPALESE RUPEE","₨","NIO","CORDOBA ORO","C\\$","NGN","NAIRA","₦","OMR","RIAL OMANI","﷼","PKR","PAKISTAN RUPEE","₨","PAB","BALBOA","B/.","PGK","KINA","PYG","GUARANI","GS","PEN","NUEVO SOL","PHP","PHILIPPINE PESO","₱","PLN","ZLOTY","ZŁ","QAR","QATARI RIAL","﷼","MKD","DENAR","ДЕН","RON","ROMANIAN LEU","LEI","RUB","RUSSIAN RUBLE","₽","RWF","RWANDA FRANC","SHP","SAINT HELENA POUND","£","WST","TALA","STN","DOBRA","SAR","SAUDI RIYAL","﷼","RSD","SERBIAN DINAR","ДИН.","SCR","SEYCHELLES RUPEE","₨","SLL","LEONE","SGD","SINGAPORE DOLLAR","XSU","SUCRE","SBD","SOLOMON ISLANDS DOLLAR","SOS","SOMALI SHILLING","SSP","SOUTH SUDANESE POUND","LKR","SRI LANKA RUPEE","₨","SDG","SUDANESE POUND","SRD","SURINAM DOLLAR","SZL","LILANGENI","SEK","SWEDISH KRONA","KR","CHE","WIR EURO","CHW","WIR FRANC","SYP","SYRIAN POUND","£","TWD","NEW TAIWAN DOLLAR","NT\\$","TJS","SOMONI","TZS","TANZANIAN SHILLING","THB","BAHT","฿","TOP","PA’ANGA","TTD","TRINIDAD AND TOBAGO DOLLAR","TT\\$","TND","TUNISIAN DINAR","TRY","TURKISH LIRA","","TMT","TURKMENISTAN NEW MANAT","UGX","UGANDA SHILLING","UAH","HRYVNIA","₴","AED","UAE DIRHAM","USN","US DOLLAR (NEXT DAY)","UYI","URUGUAY PESO EN UNIDADES INDEXADAS (URUIURUI)","UYU","PESO URUGUAYO","$U","UZS","UZBEKISTAN SUM","ЛВ","VUV","VATU","VEF","BOLIVAR","BS","VND","DONG","₫","YER","YEMENI RIAL","﷼","ZMW","ZAMBIAN KWACHA","ZWL","ZIMBABWE DOLLAR"];t.default=e=>{e=e.replace(/ +/g," ").replace(/\u200C/g,"").replace(/\u00a0/g,"");let n=[],a=!1;for(const t of o)if(!a&&t&&""!==t)try{const o=new RegExp(`\\d+(\\${t}+)\\d+`,"g");if(e.match(o))a=!0,n=n.concat(e.match(o));else{const o=new RegExp(`\\${t}((?:\\d|\\,)*\\.?\\d+)`,"g");e.match(o)&&(a=!0,n=n.concat(e.match(o)||[]));const r=new RegExp(`((?:\\d|\\,)*\\.?\\d+)\\${t}`,"g");e.match(r)&&!a&&(a=!0,n=n.concat(e.match(r)||[]))}}catch(e){console.error(e)}const r=[];for(const e of n){const o=e.match(/\d+(\D+)\d+/g);let n=parseInt(e.replace(/[^\d]/g,""));const a=e.replace(/\,|\.|\d/g,"");o||(n*=100),a&&r.push({price:n,devise:t.getDevise(a)})}return r.filter(((e,t)=>r.findIndex((t=>t.price===e.price&&t.devise===e.devise))===t)).sort(((e,t)=>e.price-t.price))},t.getDevise=e=>{if(!e)return"EUR";let t=e=e.replace(/\s/g,"");if(Object.keys(n).includes(e))return e;for(const t of Object.keys(n))if(n[t].indexOf(e))return t;return t};const n={EUR:["EUR","Euro","Euros","€"],USD:["USD","US Dollar","$"],AFN:["AFN","Afghani","؋"],ALL:["ALL","Lek"],DZD:["DZD","Algerian Dinar"],AOA:["AOA","Kwanza"],XCD:["XCD","East Caribbean Dollar","$"],ARS:["ARS","Argentine Peso","$"],AMD:["AMD","Armenian Dram"],AWG:["AWG","Aruban Florin","ƒ"],AUD:["AUD","Australian Dollar","$"],AZN:["AZN","Azerbaijanian Manat","₼"],BSD:["BSD","Bahamian Dollar","$"],BHD:["BHD","Bahraini Dinar"],BDT:["BDT","Taka"],BBD:["BBD","Barbados Dollar","$"],BYN:["BYN","Belarussian Ruble","Br"],BZD:["BZD","Belize Dollar","BZ$"],XOF:["XOF","CFA Franc BCEAO"],BMD:["BMD","Bermudian Dollar","$"],BTN:["BTN","Ngultrum"],INR:["INR","Indian Rupee",""],BOB:["BOB","Boliviano","$b"],BOV:["BOV","Mvdol"],BAM:["BAM","Convertible Mark","KM"],BWP:["BWP","Pula","P"],NOK:["NOK","Norwegian Krone","kr"],BRL:["BRL","Brazilian Real","R$"],BND:["BND","Brunei Dollar","$"],BGN:["BGN","Bulgarian Lev","лв"],BIF:["BIF","Burundi Franc"],CVE:["CVE","Cabo Verde Escudo"],KHR:["KHR","Riel","៛"],XAF:["XAF","CFA Franc BEAC"],CAD:["CAD","Canadian Dollar","$"],KYD:["KYD","Cayman Islands Dollar","$"],CLF:["CLF","Unidad de Fomento"],CLP:["CLP","Chilean Peso","$"],CNY:["CNY","Yuan Renminbi","¥"],COP:["COP","Colombian Peso","$"],COU:["COU","Unidad de Valor Real"],KMF:["KMF","Comoro Franc"],CDF:["CDF","Congolese Franc"],NZD:["NZD","New Zealand Dollar","$"],CRC:["CRC","Costa Rican Colon","₡"],HRK:["HRK","Kuna","kn"],CUC:["CUC","Peso Convertible"],CUP:["CUP","Cuban Peso","₱"],ANG:["ANG","Netherlands Antillean Guilder","ƒ"],CZK:["CZK","Czech Koruna","Kč"],DKK:["DKK","Danish Krone","kr"],DJF:["DJF","Djibouti Franc"],DOP:["DOP","Dominican Peso","RD$"],EGP:["EGP","Egyptian Pound","£"],SVC:["SVC","El Salvador Colon","$"],ERN:["ERN","Nakfa"],ETB:["ETB","Ethiopian Birr"],FKP:["FKP","Falkland Islands Pound","£"],FJD:["FJD","Fiji Dollar","$"],XPF:["XPF","CFP Franc"],GMD:["GMD","Dalasi"],GEL:["GEL","Lari"],GHS:["GHS","Ghana Cedi","¢"],GIP:["GIP","Gibraltar Pound","£"],GTQ:["GTQ","Quetzal","Q"],GBP:["GBP","Pound Sterling","£"],GNF:["GNF","Guinea Franc"],GYD:["GYD","Guyana Dollar","$"],HTG:["HTG","Gourde"],HNL:["HNL","Lempira","L"],HKD:["HKD","Hong Kong Dollar","$"],HUF:["HUF","Forint","Ft"],ISK:["ISK","Iceland Krona","kr"],IDR:["IDR","Rupiah","Rp"],XDR:["XDR","SDR (Special Drawing Right)"],IRR:["IRR","Iranian Rial","﷼"],IQD:["IQD","Iraqi Dinar"],ILS:["ILS","New Israeli Sheqel","₪"],JMD:["JMD","Jamaican Dollar","J$"],JPY:["JPY","Yen","¥"],JOD:["JOD","Jordanian Dinar"],KZT:["KZT","Tenge","лв"],KES:["KES","Kenyan Shilling"],KPW:["KPW","North Korean Won","₩"],KRW:["KRW","Won","₩"],KWD:["KWD","Kuwaiti Dinar"],KGS:["KGS","Som","лв"],LAK:["LAK","Kip","₭"],LBP:["LBP","Lebanese Pound","£"],LSL:["LSL","Loti"],ZAR:["ZAR","Rand","R"],LRD:["LRD","Liberian Dollar","$"],LYD:["LYD","Libyan Dinar"],CHF:["CHF","Swiss Franc"],MOP:["MOP","Pataca"],MGA:["MGA","Malagasy Ariary"],MWK:["MWK","Kwacha"],MYR:["MYR","Malaysian Ringgit","RM"],MVR:["MVR","Rufiyaa"],MRU:["MRU","Ouguiya"],MUR:["MUR","Mauritius Rupee","₨"],XUA:["XUA","ADB Unit of Account"],MXN:["MXN","Mexican Peso","$"],MXV:["MXV","Mexican Unidad de Inversion (UDI)"],MDL:["MDL","Moldovan Leu"],MNT:["MNT","Tugrik","₮"],MAD:["MAD","Moroccan Dirham"],MZN:["MZN","Mozambique Metical","MT"],MMK:["MMK","Kyat"],NAD:["NAD","Namibia Dollar","$"],NPR:["NPR","Nepalese Rupee","₨"],NIO:["NIO","Cordoba Oro","C$"],NGN:["NGN","Naira","₦"],OMR:["OMR","Rial Omani","﷼"],PKR:["PKR","Pakistan Rupee","₨"],PAB:["PAB","Balboa","B/."],PGK:["PGK","Kina"],PYG:["PYG","Guarani","Gs"],PEN:["PEN","Nuevo Sol","S/."],PHP:["PHP","Philippine Peso","₱"],PLN:["PLN","Zloty","zł"],QAR:["QAR","Qatari Rial","﷼"],MKD:["MKD","Denar","ден"],RON:["RON","Romanian Leu","lei"],RUB:["RUB","Russian Ruble","₽"],RWF:["RWF","Rwanda Franc"],SHP:["SHP","Saint Helena Pound","£"],WST:["WST","Tala"],STN:["STN","Dobra"],SAR:["SAR","Saudi Riyal","﷼"],RSD:["RSD","Serbian Dinar","Дин."],SCR:["SCR","Seychelles Rupee","₨"],SLL:["SLL","Leone"],SGD:["SGD","Singapore Dollar","$"],XSU:["XSU","Sucre"],SBD:["SBD","Solomon Islands Dollar","$"],SOS:["SOS","Somali Shilling","S"],SSP:["SSP","South Sudanese Pound"],LKR:["LKR","Sri Lanka Rupee","₨"],SDG:["SDG","Sudanese Pound"],SRD:["SRD","Surinam Dollar","$"],SZL:["SZL","Lilangeni"],SEK:["SEK","Swedish Krona","kr"],CHE:["CHE","WIR Euro"],CHW:["CHW","WIR Franc"],SYP:["SYP","Syrian Pound","£"],TWD:["TWD","New Taiwan Dollar","NT$"],TJS:["TJS","Somoni"],TZS:["TZS","Tanzanian Shilling"],THB:["THB","Baht","฿"],TOP:["TOP","Pa’anga"],TTD:["TTD","Trinidad and Tobago Dollar","TT$"],TND:["TND","Tunisian Dinar"],TRY:["TRY","Turkish Lira",""],TMT:["TMT","Turkmenistan New Manat"],UGX:["UGX","Uganda Shilling"],UAH:["UAH","Hryvnia","₴"],AED:["AED","UAE Dirham"],USN:["USN","US Dollar (Next day)"],UYI:["UYI","Uruguay Peso en Unidades Indexadas (URUIURUI)"],UYU:["UYU","Peso Uruguayo","$U"],UZS:["UZS","Uzbekistan Sum","лв"],VUV:["VUV","Vatu"],VEF:["VEF","Bolivar","Bs"],VND:["VND","Dong","₫"],YER:["YER","Yemeni Rial","﷼"],ZMW:["ZMW","Zambian Kwacha"],ZWL:["ZWL","Zimbabwe Dollar"]}},804:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>e.innerText.replace(/\n/g," ")},677:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(a,r){function i(e){try{s(n.next(e))}catch(e){r(e)}}function l(e){try{s(n.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,l)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=o(906),r=o(278),i=o(231),l=o(869),s=o(982),c=o(627),A=o(746),u=o(407),d=o(804);t.default=e=>n(void 0,void 0,void 0,(function*(){try{const t={};let o=yield u.default(e);t.pictures=o,t.image=o[0]?o[0]:{},t.description=d.default(e),t.prices=a.default(t.description),t.price=t.prices[0]?t.prices[0]:{},t.offers=A.default(t.description),t.tags=o[0]&&o[0].tags?o[0].tags:[],t.additionalProperty=r.default(e),t.sku=i.default(e,"sku"),t.url=c.default(e),t.productID=i.default(e,"id");const n=l.default(e);return t.additionalProperty=Object.assign(t.additionalProperty,n),t.material=s.default(e),t}catch(e){return console.error("SchemmaORG ",e),{}}}))}},t={};return function o(n){if(t[n])return t[n].exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,o),a.exports}(9)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,