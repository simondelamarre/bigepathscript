!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.pathScript=t():e.pathScript=t()}(self,(function(){return(()=>{"use strict";var e={581:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.animateScroll=void 0,t.animateScroll=(e,t,n,o,r)=>!e||new Promise((function(a,i){try{const i=e.scrollLeft,l=e.scrollTop,A=o-i,c=n-l;let s=0;const u=20;Math.easeInOutQuad=function(e,t,n,o){return(e/=o/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t};const R=function(){s+=u;const n=Math.easeInOutQuad(s,l,c,t);e.scrollTop=n;const o=Math.easeInOutQuad(s,i,A,t);e.scrollLeft=o,s<t?setTimeout(R,u):(r&&r({message:"complete"}),a({message:"complete"}))}.bind(this);R()}catch(e){i(e)}}))},275:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{A(o.next(e))}catch(e){a(e)}}function l(e){try{A(o.throw(e))}catch(e){a(e)}}function A(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}A((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(581);t.default=(e,t=100)=>!e||new Promise(((n,a)=>o(void 0,void 0,void 0,(function*(){try{let o=e.scrollHeight;const a=function(){setTimeout((function(){o===e.scrollHeight?n({status:"complete"}):r.animateScroll(e,t,o,0,a)}),500+t)};r.animateScroll(e,t,o,0,a)}catch(e){a(e)}}))))},494:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{A(o.next(e))}catch(e){a(e)}}function l(e){try{A(o.throw(e))}catch(e){a(e)}}function A(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}A((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(581);t.default=(e,t)=>new Promise(((n,a)=>o(void 0,void 0,void 0,(function*(){if(t){const o=yield r.animateScroll(e,500,t.scrollTop,0,null);o?n(o):a(o)}else n(!0)}))))},9:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{A(o.next(e))}catch(e){a(e)}}function l(e){try{A(o.throw(e))}catch(e){a(e)}}function A(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}A((o=o.apply(e,t||[])).next())}))},r=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(o,r){!function(e,t,n,o){Promise.resolve(o).then((function(t){e({value:t,done:n})}),t)}(o,r,(t=e[n](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.helloPuppeteer=t.getItem=t.processListItem=t.processScrollToBottom=t.processLoadMoreButton=t.bigePath=void 0;const a=n(275),i=n(494),l=n(677);t.bigePath=(e,n)=>o(void 0,void 0,void 0,(function*(){var o,a;const i={static:{url:window.location.href},list:[]};try{if(console.log("setup.static ",e.static),e.static)for(const t of e.static){const e=document.querySelector(t.selector);e&&(i.static[t.label]=e.textContent)}if(console.log("setup.navigation ",e.navigation),!e.navigation)return n({response:i}),i;if("loadMoreButton"===e.navigation.mode)i.list=yield t.processLoadMoreButton(e,i.list,(function(e){return e.list=e,e}));else if("scrollToBottom"===e.navigation.mode)i.list=yield t.processScrollToBottom(e,i.list,(function(e){return e}));else if("nextButton"===e.navigation.mode)try{for(var l,A=r(e.lists);!(l=yield A.next()).done;){const e=l.value;i.list=i.list.concat(i.list,yield t.processListItem(e.target.selector))}}catch(e){o={error:e}}finally{try{l&&!l.done&&(a=A.return)&&(yield a.call(A))}finally{if(o)throw o.error}}}catch(e){return{error:e,message:"wrong path setup"}}n({response:i})})),t.processLoadMoreButton=(e,n,a)=>o(void 0,void 0,void 0,(function*(){var o,i;try{for(var l,A=r(e.lists);!(l=yield A.next()).done;){const e=l.value;n=n.concat(n,yield t.processListItem(e.target.selector))}}catch(e){o={error:e}}finally{try{l&&!l.done&&(i=A.return)&&(yield i.call(A))}finally{if(o)throw o.error}}const c=document.querySelector(e.navigation.loadMoreSelector);if(!c)return a(n),n;c.click(),setTimeout((function(){t.processLoadMoreButton(e,n,a)}),1e3)})),t.processScrollToBottom=(e,n,i)=>o(void 0,void 0,void 0,(function*(){var o,l;yield a.default(window.document.body,500);try{for(var A,c=r(e.lists);!(A=yield c.next()).done;){const e=A.value;n=n.concat(n,yield t.processListItem(e.target.selector))}}catch(e){o={error:e}}finally{try{A&&!A.done&&(l=c.return)&&(yield l.call(c))}finally{if(o)throw o.error}}return i(n),n})),t.processListItem=e=>{let n=[];return new Promise(((a,i)=>o(void 0,void 0,void 0,(function*(){var o,l;const A=document.querySelectorAll(e);try{try{for(var c,s=r(A);!(c=yield s.next()).done;){const e=c.value;(yield t.getItem(e))&&n.push()}}catch(e){o={error:e}}finally{try{c&&!c.done&&(l=s.return)&&(yield l.call(s))}finally{if(o)throw o.error}}a(n)}catch(e){i(e)}}))))},t.getItem=e=>new Promise(((t,n)=>o(void 0,void 0,void 0,(function*(){try{if(e.classList.contains("bigeProcessed"))t(null);else{yield i.default(window.document.body,e),e.classList.add("bigeProcessed");const n=yield l.default(e);t(n)}}catch(e){n("fail")}})))),t.helloPuppeteer=e=>o(void 0,void 0,void 0,(function*(){return`hello ${e}`})),window.bigePath=t.bigePath,window.helloPuppeteer=t.helloPuppeteer},231:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=n(278);t.default=(e,t)=>{let n="";if(!e)return"";const r=o.default(e);for(const e of Object.keys(r))-1!==e.indexOf(t)&&(n=r[e]);return n}},278:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t={};for(const n of e.attributes)t[n.name]=n.value;const n=e.querySelectorAll("*");for(const e of n)for(const n of e.attributes)t[n.name]=n.value;return t}},627:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t=e.querySelectorAll("a");if(t.length>0){const e=[];for(const n of t)n.getAttribute("href")&&-1===n.getAttribute("href").indexOf("javascript")&&e.push(n.getAttribute("href"));return e.length>1&&e.sort(((e,t)=>e.length-t.length)),e[0]}return""}},869:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t={},n=e.querySelectorAll("[itemprop]");for(const e of n)t[e.attributes.itemprop.value]=e.attributes.content?e.attributes.content.value:"";return t}},982:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>(console.info("material is under development target ",e),[])},746:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{e=e.replace(/\s/g,"");const t=[];try{const n=new RegExp("(\\d?\\d?)%","g"),o=e.match(n);if(o)for(const e of o)t.push({operator:e.match(/\+/g)?"+":"-",amount:e.match(/\d+/g)?e.match(/\d+/g)[0]:0,reducer:"%"})}catch(e){console.error("Probably invalid regular expression ",e)}return t}},407:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t=[];try{const n=e.querySelectorAll("img");for(const e of n)try{let n="";e.attributes.alt&&(n=e.attributes.alt.value);let o="";e.attributes.src&&(o=e.attributes.src.value),-1===t.findIndex((e=>e.url===o))&&t.push({url:o,description:n||""})}catch(e){console.error("ERROR in pictures selector loop")}}catch(e){console.error("ERROR PICTuRe LIST ::: ",e)}return t}},906:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getDevise=void 0;const n=["EUR"," EUR"," €","€","EURO","EUROS","AFN","AFGHANI","ALL","LEK","DZD","ALGERIAN DINAR","USD","US DOLLAR","$","AOA","KWANZA","XCD","EAST CARIBBEAN DOLLAR","ARS","ARGENTINE PESO","AMD","ARMENIAN DRAM","AWG","ARUBAN FLORIN","Ƒ","AUD","AUSTRALIAN DOLLAR","AZN","AZERBAIJANIAN MANAT","₼","BSD","BAHAMIAN DOLLAR","BHD","BAHRAINI DINAR","BDT","TAKA","BBD","BARBADOS DOLLAR","BYN","BELARUSSIAN RUBLE","BR","BZD","BELIZE DOLLAR","BZ\\$","XOF","CFA FRANC BCEAO","BMD","BERMUDIAN DOLLAR","BTN","NGULTRUM","INR","INDIAN RUPEE","","BOB","BOLIVIANO","$B","BOV","MVDOL","BAM","؋","CONVERTIBLE MARK","KM","BWP","PULA","NOK","NORWEGIAN KRONE","KR","BRL","BRAZILIAN REAL","R\\$","BND","BRUNEI DOLLAR","BGN","BULGARIAN LEV","ЛВ","BIF","BURUNDI FRANC","CVE","CABO VERDE ESCUDO","KHR","RIEL","៛","XAF","CFA FRANC BEAC","CAD","CANADIAN DOLLAR","KYD","CAYMAN ISLANDS DOLLAR","CLF","UNIDAD DE FOMENTO","CLP","CHILEAN PESO","CNY","YUAN RENMINBI","¥","COP","COLOMBIAN PESO","COU","UNIDAD DE VALOR REAL","KMF","COMORO FRANC","CDF","CONGOLESE FRANC","NZD","NEW ZEALAND DOLLAR","CRC","COSTA RICAN COLON","₡","HRK","KUNA","KN","CUC","PESO CONVERTIBLE","CUP","CUBAN PESO","₱","ANG","NETHERLANDS ANTILLEAN GUILDER","Ƒ","CZK","CZECH KORUNA","KČ","DKK","DANISH KRONE","KR","DJF","DJIBOUTI FRANC","DOP","DOMINICAN PESO","RD\\$","EGP","EGYPTIAN POUND","£","SVC","EL SALVADOR COLON","ERN","NAKFA","ETB","ETHIOPIAN BIRR","FKP","FALKLAND ISLANDS POUND","£","FJD","FIJI DOLLAR","XPF","CFP FRANC","GMD","DALASI","GEL","LARI","GHS","GHANA CEDI","¢","GIP","GIBRALTAR POUND","£","GTQ","QUETZAL","Q","GBP","POUND STERLING","£","GNF","GUINEA FRANC","GYD","GUYANA DOLLAR","HTG","GOURDE","HNL","LEMPIRA","L","HKD","HONG KONG DOLLAR","HUF","FORINT","FT","ISK","ICELAND KRONA","KR","IDR","RUPIAH","RP","XDR","SDR (SPECIAL DRAWING RIGHT)","IRR","IRANIAN RIAL","﷼","IQD","IRAQI DINAR","ILS","NEW ISRAELI SHEQEL","₪","JMD","JAMAICAN DOLLAR","J\\$","JPY","YEN","¥","JOD","JORDANIAN DINAR","KZT","TENGE","ЛВ","KES","KENYAN SHILLING","KPW","NORTH KOREAN WON","₩","KRW","WON","₩","KWD","KUWAITI DINAR","KGS","SOM","ЛВ","LAK","KIP","₭","LBP","LEBANESE POUND","£","LSL","LOTI","ZAR","RAND","R","LRD","LIBERIAN DOLLAR","LYD","LIBYAN DINAR","CHF","SWISS FRANC","MOP","PATACA","MGA","MALAGASY ARIARY","MWK","KWACHA","MYR","MALAYSIAN RINGGIT","RM","MVR","RUFIYAA","MRU","OUGUIYA","MUR","MAURITIUS RUPEE","₨","XUA","ADB UNIT OF ACCOUNT","MXN","MEXICAN PESO","MXV","MEXICAN UNIDAD DE INVERSION (UDI)","MDL","MOLDOVAN LEU","MNT","TUGRIK","₮","MAD","MOROCCAN DIRHAM","MZN","MOZAMBIQUE METICAL","MT","MMK","KYAT","NAD","NAMIBIA DOLLAR","NPR","NEPALESE RUPEE","₨","NIO","CORDOBA ORO","C\\$","NGN","NAIRA","₦","OMR","RIAL OMANI","﷼","PKR","PAKISTAN RUPEE","₨","PAB","BALBOA","B/.","PGK","KINA","PYG","GUARANI","GS","PEN","NUEVO SOL","S/.","PHP","PHILIPPINE PESO","₱","PLN","ZLOTY","ZŁ","QAR","QATARI RIAL","﷼","MKD","DENAR","ДЕН","RON","ROMANIAN LEU","LEI","RUB","RUSSIAN RUBLE","₽","RWF","RWANDA FRANC","SHP","SAINT HELENA POUND","£","WST","TALA","STN","DOBRA","SAR","SAUDI RIYAL","﷼","RSD","SERBIAN DINAR","ДИН.","SCR","SEYCHELLES RUPEE","₨","SLL","LEONE","SGD","SINGAPORE DOLLAR","XSU","SUCRE","SBD","SOLOMON ISLANDS DOLLAR","SOS","SOMALI SHILLING","S","SSP","SOUTH SUDANESE POUND","LKR","SRI LANKA RUPEE","₨","SDG","SUDANESE POUND","SRD","SURINAM DOLLAR","SZL","LILANGENI","SEK","SWEDISH KRONA","KR","CHE","WIR EURO","CHW","WIR FRANC","SYP","SYRIAN POUND","£","TWD","NEW TAIWAN DOLLAR","NT\\$","TJS","SOMONI","TZS","TANZANIAN SHILLING","THB","BAHT","฿","TOP","PA’ANGA","TTD","TRINIDAD AND TOBAGO DOLLAR","TT\\$","TND","TUNISIAN DINAR","TRY","TURKISH LIRA","","TMT","TURKMENISTAN NEW MANAT","UGX","UGANDA SHILLING","UAH","HRYVNIA","₴","AED","UAE DIRHAM","USN","US DOLLAR (NEXT DAY)","UYI","URUGUAY PESO EN UNIDADES INDEXADAS (URUIURUI)","UYU","PESO URUGUAYO","$U","UZS","UZBEKISTAN SUM","ЛВ","VUV","VATU","VEF","BOLIVAR","BS","VND","DONG","₫","YER","YEMENI RIAL","﷼","ZMW","ZAMBIAN KWACHA","ZWL","ZIMBABWE DOLLAR"];t.default=e=>{e=e.replace(/ +/g," ");let o=[],r=!1;for(const t of n)if(!r&&t&&""!==t)try{const n=new RegExp(`\\d+(\\${t}+)\\d+`,"g");if(e.match(n))r=!0,o=o.concat(e.match(n));else{const n=new RegExp(`\\${t}((?:\\d|\\,)*\\.?\\d+)`,"g");e.match(n)&&(r=!0,o=o.concat(e.match(n)||[]));const a=new RegExp(`((?:\\d|\\,)*\\.?\\d+)\\${t}`,"g");e.match(a)&&!r&&(r=!0,o=o.concat(e.match(a)||[]))}}catch(e){console.error(e)}const a=[];for(const e of o){const n=e.match(/\d+(\D+)\d+/g);let o=parseInt(e.replace(/[^\d]/g,""));const r=e.replace(/\,|\.|\d/g,"");n||(o*=100),a.push({price:o,devise:t.getDevise(r)})}return a.filter(((e,t)=>a.findIndex((t=>t.price===e.price&&t.devise===e.devise))===t)).sort(((e,t)=>e.price-t.price))},t.getDevise=e=>{if(!e)return"EUR";let t=e=e.replace(/\s/g,"");if(Object.keys(o).includes(e))return e;for(const t of Object.keys(o))if(o[t].indexOf(e))return t;return t};const o={EUR:["EUR","Euro","Euros","€"],USD:["USD","US Dollar","$"],AFN:["AFN","Afghani","؋"],ALL:["ALL","Lek"],DZD:["DZD","Algerian Dinar"],AOA:["AOA","Kwanza"],XCD:["XCD","East Caribbean Dollar","$"],ARS:["ARS","Argentine Peso","$"],AMD:["AMD","Armenian Dram"],AWG:["AWG","Aruban Florin","ƒ"],AUD:["AUD","Australian Dollar","$"],AZN:["AZN","Azerbaijanian Manat","₼"],BSD:["BSD","Bahamian Dollar","$"],BHD:["BHD","Bahraini Dinar"],BDT:["BDT","Taka"],BBD:["BBD","Barbados Dollar","$"],BYN:["BYN","Belarussian Ruble","Br"],BZD:["BZD","Belize Dollar","BZ$"],XOF:["XOF","CFA Franc BCEAO"],BMD:["BMD","Bermudian Dollar","$"],BTN:["BTN","Ngultrum"],INR:["INR","Indian Rupee",""],BOB:["BOB","Boliviano","$b"],BOV:["BOV","Mvdol"],BAM:["BAM","Convertible Mark","KM"],BWP:["BWP","Pula","P"],NOK:["NOK","Norwegian Krone","kr"],BRL:["BRL","Brazilian Real","R$"],BND:["BND","Brunei Dollar","$"],BGN:["BGN","Bulgarian Lev","лв"],BIF:["BIF","Burundi Franc"],CVE:["CVE","Cabo Verde Escudo"],KHR:["KHR","Riel","៛"],XAF:["XAF","CFA Franc BEAC"],CAD:["CAD","Canadian Dollar","$"],KYD:["KYD","Cayman Islands Dollar","$"],CLF:["CLF","Unidad de Fomento"],CLP:["CLP","Chilean Peso","$"],CNY:["CNY","Yuan Renminbi","¥"],COP:["COP","Colombian Peso","$"],COU:["COU","Unidad de Valor Real"],KMF:["KMF","Comoro Franc"],CDF:["CDF","Congolese Franc"],NZD:["NZD","New Zealand Dollar","$"],CRC:["CRC","Costa Rican Colon","₡"],HRK:["HRK","Kuna","kn"],CUC:["CUC","Peso Convertible"],CUP:["CUP","Cuban Peso","₱"],ANG:["ANG","Netherlands Antillean Guilder","ƒ"],CZK:["CZK","Czech Koruna","Kč"],DKK:["DKK","Danish Krone","kr"],DJF:["DJF","Djibouti Franc"],DOP:["DOP","Dominican Peso","RD$"],EGP:["EGP","Egyptian Pound","£"],SVC:["SVC","El Salvador Colon","$"],ERN:["ERN","Nakfa"],ETB:["ETB","Ethiopian Birr"],FKP:["FKP","Falkland Islands Pound","£"],FJD:["FJD","Fiji Dollar","$"],XPF:["XPF","CFP Franc"],GMD:["GMD","Dalasi"],GEL:["GEL","Lari"],GHS:["GHS","Ghana Cedi","¢"],GIP:["GIP","Gibraltar Pound","£"],GTQ:["GTQ","Quetzal","Q"],GBP:["GBP","Pound Sterling","£"],GNF:["GNF","Guinea Franc"],GYD:["GYD","Guyana Dollar","$"],HTG:["HTG","Gourde"],HNL:["HNL","Lempira","L"],HKD:["HKD","Hong Kong Dollar","$"],HUF:["HUF","Forint","Ft"],ISK:["ISK","Iceland Krona","kr"],IDR:["IDR","Rupiah","Rp"],XDR:["XDR","SDR (Special Drawing Right)"],IRR:["IRR","Iranian Rial","﷼"],IQD:["IQD","Iraqi Dinar"],ILS:["ILS","New Israeli Sheqel","₪"],JMD:["JMD","Jamaican Dollar","J$"],JPY:["JPY","Yen","¥"],JOD:["JOD","Jordanian Dinar"],KZT:["KZT","Tenge","лв"],KES:["KES","Kenyan Shilling"],KPW:["KPW","North Korean Won","₩"],KRW:["KRW","Won","₩"],KWD:["KWD","Kuwaiti Dinar"],KGS:["KGS","Som","лв"],LAK:["LAK","Kip","₭"],LBP:["LBP","Lebanese Pound","£"],LSL:["LSL","Loti"],ZAR:["ZAR","Rand","R"],LRD:["LRD","Liberian Dollar","$"],LYD:["LYD","Libyan Dinar"],CHF:["CHF","Swiss Franc"],MOP:["MOP","Pataca"],MGA:["MGA","Malagasy Ariary"],MWK:["MWK","Kwacha"],MYR:["MYR","Malaysian Ringgit","RM"],MVR:["MVR","Rufiyaa"],MRU:["MRU","Ouguiya"],MUR:["MUR","Mauritius Rupee","₨"],XUA:["XUA","ADB Unit of Account"],MXN:["MXN","Mexican Peso","$"],MXV:["MXV","Mexican Unidad de Inversion (UDI)"],MDL:["MDL","Moldovan Leu"],MNT:["MNT","Tugrik","₮"],MAD:["MAD","Moroccan Dirham"],MZN:["MZN","Mozambique Metical","MT"],MMK:["MMK","Kyat"],NAD:["NAD","Namibia Dollar","$"],NPR:["NPR","Nepalese Rupee","₨"],NIO:["NIO","Cordoba Oro","C$"],NGN:["NGN","Naira","₦"],OMR:["OMR","Rial Omani","﷼"],PKR:["PKR","Pakistan Rupee","₨"],PAB:["PAB","Balboa","B/."],PGK:["PGK","Kina"],PYG:["PYG","Guarani","Gs"],PEN:["PEN","Nuevo Sol","S/."],PHP:["PHP","Philippine Peso","₱"],PLN:["PLN","Zloty","zł"],QAR:["QAR","Qatari Rial","﷼"],MKD:["MKD","Denar","ден"],RON:["RON","Romanian Leu","lei"],RUB:["RUB","Russian Ruble","₽"],RWF:["RWF","Rwanda Franc"],SHP:["SHP","Saint Helena Pound","£"],WST:["WST","Tala"],STN:["STN","Dobra"],SAR:["SAR","Saudi Riyal","﷼"],RSD:["RSD","Serbian Dinar","Дин."],SCR:["SCR","Seychelles Rupee","₨"],SLL:["SLL","Leone"],SGD:["SGD","Singapore Dollar","$"],XSU:["XSU","Sucre"],SBD:["SBD","Solomon Islands Dollar","$"],SOS:["SOS","Somali Shilling","S"],SSP:["SSP","South Sudanese Pound"],LKR:["LKR","Sri Lanka Rupee","₨"],SDG:["SDG","Sudanese Pound"],SRD:["SRD","Surinam Dollar","$"],SZL:["SZL","Lilangeni"],SEK:["SEK","Swedish Krona","kr"],CHE:["CHE","WIR Euro"],CHW:["CHW","WIR Franc"],SYP:["SYP","Syrian Pound","£"],TWD:["TWD","New Taiwan Dollar","NT$"],TJS:["TJS","Somoni"],TZS:["TZS","Tanzanian Shilling"],THB:["THB","Baht","฿"],TOP:["TOP","Pa’anga"],TTD:["TTD","Trinidad and Tobago Dollar","TT$"],TND:["TND","Tunisian Dinar"],TRY:["TRY","Turkish Lira",""],TMT:["TMT","Turkmenistan New Manat"],UGX:["UGX","Uganda Shilling"],UAH:["UAH","Hryvnia","₴"],AED:["AED","UAE Dirham"],USN:["USN","US Dollar (Next day)"],UYI:["UYI","Uruguay Peso en Unidades Indexadas (URUIURUI)"],UYU:["UYU","Peso Uruguayo","$U"],UZS:["UZS","Uzbekistan Sum","лв"],VUV:["VUV","Vatu"],VEF:["VEF","Bolivar","Bs"],VND:["VND","Dong","₫"],YER:["YER","Yemeni Rial","﷼"],ZMW:["ZMW","Zambian Kwacha"],ZWL:["ZWL","Zimbabwe Dollar"]}},804:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>e.innerText.replace(/\n/g," ")},677:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{A(o.next(e))}catch(e){a(e)}}function l(e){try{A(o.throw(e))}catch(e){a(e)}}function A(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}A((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(906),a=n(278),i=n(231),l=n(869),A=n(982),c=n(627),s=n(746),u=n(407),R=n(804);t.default=e=>o(void 0,void 0,void 0,(function*(){try{const t={};let n=yield u.default(e);t.pictures=n,t.image=n[0]?n[0]:{},t.description=R.default(e),t.prices=r.default(t.description),t.price=t.prices[0]?t.prices[0]:{},t.offers=s.default(t.description),t.tags=n[0]&&n[0].tags?n[0].tags:[],t.additionalProperty=a.default(e),t.sku=i.default(e,"sku"),t.url=c.default(e),t.productID=i.default(e,"id");const o=l.default(e);return t.additionalProperty=Object.assign(t.additionalProperty,o),t.material=A.default(e),t}catch(e){return console.error("SchemmaORG ",e),{}}}))}},t={};return function n(o){if(t[o])return t[o].exports;var r=t[o]={exports:{}};return e[o].call(r.exports,r,r.exports,n),r.exports}(9)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,