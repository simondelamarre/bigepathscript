!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.pathScript=t():e.pathScript=t()}(self,(function(){return(()=>{"use strict";var e={581:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.animateScroll=void 0,t.animateScroll=(e,t,o,n,r,a)=>new Promise((function(i,l){try{const l=r-o,s=n-t;let c=0;const A=20;Math.easeInOutQuad=function(e,t,o,n){return(e/=n/2)<1?o/2*e*e+t:-o/2*(--e*(e-2)-1)+t};const u=function(){c+=A;const n=Math.easeInOutQuad(c,t,s,e),r=Math.easeInOutQuad(c,o,l,e);window.scroll(r,n),c<e?setTimeout(u,A):(a&&a({message:"complete"}),i({message:"complete"}))}.bind(this);u()}catch(e){l(e)}}))},275:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{s(n.next(e))}catch(e){a(e)}}function l(e){try{s(n.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,l)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=o(581);t.default=(e=100)=>!scroll||new Promise(((t,o)=>n(void 0,void 0,void 0,(function*(){try{let o=document.body.scrollHeight;const n=function(){setTimeout((function(){o===document.body.scrollHeight?t({status:"complete"}):(o=document.body.scrollHeight,r.animateScroll(e,window.scrollY,window.scrollX,o,0,n))}),100+e)};r.animateScroll(e,window.scrollY,window.scrollX,o,0,n)}catch(e){o(e)}}))))},494:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{s(n.next(e))}catch(e){a(e)}}function l(e){try{s(n.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,l)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=o(581);t.default=e=>new Promise(((t,o)=>n(void 0,void 0,void 0,(function*(){if(e){const n=yield r.animateScroll(100,window.scrollY,window.scrollX,window.scrollY+e.getBoundingClientRect().y,window.scrollX+e.getBoundingClientRect().x,null);n?t(n):o(n)}else t(!0)}))))},9:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{s(n.next(e))}catch(e){a(e)}}function l(e){try{s(n.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,l)}s((n=n.apply(e,t||[])).next())}))},r=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,o=e[Symbol.asyncIterator];return o?o.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(o){t[o]=e[o]&&function(t){return new Promise((function(n,r){!function(e,t,o,n){Promise.resolve(n).then((function(t){e({value:t,done:o})}),t)}(n,r,(t=e[o](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.helloPuppeteer=t.getItem=t.processListItem=t.processScrollToBottom=t.processLoadMoreButton=t.bigePath=void 0;const a=o(275),i=o(494),l=o(677);t.bigePath=(e,o)=>n(void 0,void 0,void 0,(function*(){return console.log("bigePath"),new Promise((a=>n(void 0,void 0,void 0,(function*(){var n,i;console.log("in promise");const l={static:{url:window.location.href},list:[],message:"hello"};console.log("let try");try{if(l.message="try",e.static)for(const t of e.static){const e=document.querySelector(t.selector);e&&(l.static[t.label]=e.textContent)}if(console.log("static passed"),l.message="static passed",console.log("setup.navigation ",e.navigation),!e.navigation)return o({response:l}),a(l),l;if(l.message="has navigation "+e.navigation,"loadMore"===e.navigation.mode)console.log("load more nav mode"),l.message="waiting parser loadmore",yield t.processLoadMoreButton(e,l.list,(function(e){return console.log("processed ",e),l.list=e,e})),console.log("will resolve"),a(l);else if("scrollToBottom"===e.navigation.mode)l.message="waiting parser processScrollToBottom",l.list=yield t.processScrollToBottom(e,l.list,(function(e){return e})),a(l);else if("nextButton"===e.navigation.mode){l.message="waiting parser processScrollToBottom";try{for(var s,c=r(e.lists);!(s=yield c.next()).done;){const e=s.value;l.list=l.list.concat(l.list,yield t.processListItem(e.target.selector))}}catch(e){n={error:e}}finally{try{s&&!s.done&&(i=c.return)&&(yield i.call(c))}finally{if(n)throw n.error}}a(l)}}catch(e){return console.log("has error"),o({response:l,err:e}),a(l),{error:e,message:"wrong path setup"}}o({response:l})}))))})),t.processLoadMoreButton=(e,o,a)=>n(void 0,void 0,void 0,(function*(){var n,i;console.log("processLoadMoreButton ",o,e.lists);try{for(var l,s=r(e.lists);!(l=yield s.next()).done;){const e=l.value,n=yield t.processListItem(e.target.selector);console.log("news ?? ",n,o),o=o.concat(n)}}catch(e){n={error:e}}finally{try{l&&!l.done&&(i=s.return)&&(yield i.call(s))}finally{if(n)throw n.error}}const c=document.querySelector(e.navigation.loadMoreSelector);if(!c)return a(o),o;c.click(),setTimeout((function(){t.processLoadMoreButton(e,o,a)}),1e3)})),t.processScrollToBottom=(e,o,i)=>n(void 0,void 0,void 0,(function*(){var n,l;yield a.default(200);try{for(var s,c=r(e.lists);!(s=yield c.next()).done;){const e=s.value;o=o.concat(o,yield t.processListItem(e.target.selector))}}catch(e){n={error:e}}finally{try{s&&!s.done&&(l=c.return)&&(yield l.call(c))}finally{if(n)throw n.error}}return i(o),o})),t.processListItem=e=>{let o=[];return new Promise(((a,i)=>n(void 0,void 0,void 0,(function*(){var n,l;const s=document.querySelectorAll(e);try{try{for(var c,A=r(s);!(c=yield A.next()).done;){const e=c.value;if(!e.classList.contains("processed")){const n=yield t.getItem(e);n&&o.push(n),e.classList.add("processed")}}}catch(e){n={error:e}}finally{try{c&&!c.done&&(l=A.return)&&(yield l.call(A))}finally{if(n)throw n.error}}a(o)}catch(e){i(e)}}))))},t.getItem=e=>new Promise(((t,o)=>n(void 0,void 0,void 0,(function*(){try{if(e.classList.contains("bigeProcessed"))t(null);else{yield i.default(e),e.classList.add("bigeProcessed");const o=yield l.default(e);t(o)}}catch(e){o("fail")}})))),t.helloPuppeteer=e=>n(void 0,void 0,void 0,(function*(){return`hello ${e}`})),window.bigePath=t.bigePath,window.helloPuppeteer=t.helloPuppeteer,window.scrollToBottom=a.default},231:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=o(278);t.default=(e,t)=>{let o="";if(!e)return"";const r=n.default(e);for(const e of Object.keys(r))-1!==e.indexOf(t)&&(o=r[e]);return o}},278:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=["class","style","data-widths","data-sizes","sizes","srcset","method","enctype","type","disabled","x","y","width","height","viewBox","fill","stroke-width","stroke-linecap","stroke-miterlimit","d","version","xmlns","xmlns:xlink","xml:space","transform","data-swaction","data-test","checked","data-image-widths","aria-hidden"];t.default=e=>{const t={};for(const n of e.attributes)o.includes(n.name)||(t[n.name]=n.value);const n=e.querySelectorAll("*");for(const e of n)for(const n of e.attributes)o.includes(n.name)||(t[n.name]=n.value);return t}},627:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t=e.querySelectorAll("a");if(t.length>0){const e=[];for(const o of t)o.getAttribute("href")&&-1===o.getAttribute("href").indexOf("javascript")&&e.push(o.getAttribute("href"));return e.length>1&&e.sort(((e,t)=>e.length-t.length)),e[0]}return""}},869:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t={},o=e.querySelectorAll("[itemprop]");for(const e of o)t[e.attributes.itemprop.value]=e.attributes.content?e.attributes.content.value:"";return t}},982:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>[]},746:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{e=e.replace(/\s/g,"");const t=[];try{const o=new RegExp("(\\d?\\d?)%","g"),n=e.match(o);if(n)for(const e of n)t.push({operator:e.match(/\+/g)?"+":"-",amount:e.match(/\d+/g)?e.match(/\d+/g)[0]:0,reducer:"%"})}catch(e){console.error("Probably invalid regular expression ",e)}return t}},407:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t=[];try{const o=e.querySelectorAll("img");for(const e of o)try{let o="";e.attributes.alt&&(o=e.attributes.alt.value);let n="";e.attributes.src&&(n=e.attributes.src.value);const r=e.attributes["data-srcset"];if(console.log("dataSrcSet ",r),r){const e=r.value.split(",");console.log("srcSetList ",e);for(let o of e){const e=o.split(" ")[0];-1===t.findIndex((t=>t.url===e))&&t.push({url:e,description:"no-description"})}}const a=e.attributes.srcset;if(a){const e=a.value.split(",");for(let o of e){const e=o.split(" ")[0];-1===t.findIndex((t=>t.url===e))&&t.push({url:e,description:"no-description"})}}-1===t.findIndex((e=>e.url===n))&&t.push({url:n,description:o||"no-description"})}catch(e){console.error("ERROR in pictures selector loop")}}catch(e){console.error("ERROR PICTuRe LIST ::: ",e)}return t}},906:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getDevise=void 0;const o=["EUR"," EUR"," €","€","€‌","EURO","EUROS","AFN","AFGHANI","ALL","LEK","DZD","ALGERIAN DINAR","USD","US DOLLAR","$","AOA","KWANZA","XCD","EAST CARIBBEAN DOLLAR","ARS","ARGENTINE PESO","AMD","ARMENIAN DRAM","AWG","ARUBAN FLORIN","Ƒ","AUD","AUSTRALIAN DOLLAR","AZN","AZERBAIJANIAN MANAT","₼","BSD","BAHAMIAN DOLLAR","BHD","BAHRAINI DINAR","BDT","TAKA","BBD","BARBADOS DOLLAR","BYN","BELARUSSIAN RUBLE","BR","BZD","BELIZE DOLLAR","BZ\\$","XOF","CFA FRANC BCEAO","BMD","BERMUDIAN DOLLAR","BTN","NGULTRUM","INR","INDIAN RUPEE","","BOB","BOLIVIANO","$B","BOV","MVDOL","BAM","؋","CONVERTIBLE MARK","KM","BWP","PULA","NOK","NORWEGIAN KRONE","KR","BRL","BRAZILIAN REAL","R\\$","BND","BRUNEI DOLLAR","BGN","BULGARIAN LEV","ЛВ","BIF","BURUNDI FRANC","CVE","CABO VERDE ESCUDO","KHR","RIEL","៛","XAF","CFA FRANC BEAC","CAD","CANADIAN DOLLAR","KYD","CAYMAN ISLANDS DOLLAR","CLF","UNIDAD DE FOMENTO","CLP","CHILEAN PESO","CNY","YUAN RENMINBI","¥","COP","COLOMBIAN PESO","COU","UNIDAD DE VALOR REAL","KMF","COMORO FRANC","CDF","CONGOLESE FRANC","NZD","NEW ZEALAND DOLLAR","CRC","COSTA RICAN COLON","₡","HRK","KUNA","KN","CUC","PESO CONVERTIBLE","CUP","CUBAN PESO","₱","ANG","NETHERLANDS ANTILLEAN GUILDER","Ƒ","CZK","CZECH KORUNA","KČ","DKK","DANISH KRONE","KR","DJF","DJIBOUTI FRANC","DOP","DOMINICAN PESO","RD\\$","EGP","EGYPTIAN POUND","£","SVC","EL SALVADOR COLON","ERN","NAKFA","ETB","ETHIOPIAN BIRR","FKP","FALKLAND ISLANDS POUND","£","FJD","FIJI DOLLAR","XPF","CFP FRANC","GMD","DALASI","GEL","LARI","GHS","GHANA CEDI","¢","GIP","GIBRALTAR POUND","£","GTQ","QUETZAL","Q","GBP","POUND STERLING","£","GNF","GUINEA FRANC","GYD","GUYANA DOLLAR","HTG","GOURDE","HNL","LEMPIRA","L","HKD","HONG KONG DOLLAR","HUF","FORINT","FT","ISK","ICELAND KRONA","KR","IDR","RUPIAH","RP","XDR","SDR (SPECIAL DRAWING RIGHT)","IRR","IRANIAN RIAL","﷼","IQD","IRAQI DINAR","ILS","NEW ISRAELI SHEQEL","₪","JMD","JAMAICAN DOLLAR","J\\$","JPY","YEN","¥","JOD","JORDANIAN DINAR","KZT","TENGE","ЛВ","KES","KENYAN SHILLING","KPW","NORTH KOREAN WON","₩","KRW","WON","₩","KWD","KUWAITI DINAR","KGS","SOM","ЛВ","LAK","KIP","₭","LBP","LEBANESE POUND","£","LSL","LOTI","ZAR","RAND","R","LRD","LIBERIAN DOLLAR","LYD","LIBYAN DINAR","CHF","SWISS FRANC","MOP","PATACA","MGA","MALAGASY ARIARY","MWK","KWACHA","MYR","MALAYSIAN RINGGIT","RM","MVR","RUFIYAA","MRU","OUGUIYA","MUR","MAURITIUS RUPEE","₨","XUA","ADB UNIT OF ACCOUNT","MXN","MEXICAN PESO","MXV","MEXICAN UNIDAD DE INVERSION (UDI)","MDL","MOLDOVAN LEU","MNT","TUGRIK","₮","MAD","MOROCCAN DIRHAM","MZN","MOZAMBIQUE METICAL","MT","MMK","KYAT","NAD","NAMIBIA DOLLAR","NPR","NEPALESE RUPEE","₨","NIO","CORDOBA ORO","C\\$","NGN","NAIRA","₦","OMR","RIAL OMANI","﷼","PKR","PAKISTAN RUPEE","₨","PAB","BALBOA","B/.","PGK","KINA","PYG","GUARANI","GS","PEN","NUEVO SOL","PHP","PHILIPPINE PESO","₱","PLN","ZLOTY","ZŁ","QAR","QATARI RIAL","﷼","MKD","DENAR","ДЕН","RON","ROMANIAN LEU","LEI","RUB","RUSSIAN RUBLE","₽","RWF","RWANDA FRANC","SHP","SAINT HELENA POUND","£","WST","TALA","STN","DOBRA","SAR","SAUDI RIYAL","﷼","RSD","SERBIAN DINAR","ДИН.","SCR","SEYCHELLES RUPEE","₨","SLL","LEONE","SGD","SINGAPORE DOLLAR","XSU","SUCRE","SBD","SOLOMON ISLANDS DOLLAR","SOS","SOMALI SHILLING","SSP","SOUTH SUDANESE POUND","LKR","SRI LANKA RUPEE","₨","SDG","SUDANESE POUND","SRD","SURINAM DOLLAR","SZL","LILANGENI","SEK","SWEDISH KRONA","KR","CHE","WIR EURO","CHW","WIR FRANC","SYP","SYRIAN POUND","£","TWD","NEW TAIWAN DOLLAR","NT\\$","TJS","SOMONI","TZS","TANZANIAN SHILLING","THB","BAHT","฿","TOP","PA’ANGA","TTD","TRINIDAD AND TOBAGO DOLLAR","TT\\$","TND","TUNISIAN DINAR","TRY","TURKISH LIRA","","TMT","TURKMENISTAN NEW MANAT","UGX","UGANDA SHILLING","UAH","HRYVNIA","₴","AED","UAE DIRHAM","USN","US DOLLAR (NEXT DAY)","UYI","URUGUAY PESO EN UNIDADES INDEXADAS (URUIURUI)","UYU","PESO URUGUAYO","$U","UZS","UZBEKISTAN SUM","ЛВ","VUV","VATU","VEF","BOLIVAR","BS","VND","DONG","₫","YER","YEMENI RIAL","﷼","ZMW","ZAMBIAN KWACHA","ZWL","ZIMBABWE DOLLAR"];t.default=e=>{e=e.replace(/ +/g," ").replace(/\u200C/g,"").replace(/\u00a0/g,"");let n=[],r=!1;for(const t of o)if(!r&&t&&""!==t)try{const o=new RegExp(`\\d+(\\${t}+)\\d+`,"g");if(e.match(o))r=!0,n=n.concat(e.match(o));else{const o=new RegExp(`\\${t}((?:\\d|\\,)*\\.?\\d+)`,"g");e.match(o)&&(r=!0,n=n.concat(e.match(o)||[]));const a=new RegExp(`((?:\\d|\\,)*\\.?\\d+)\\${t}`,"g");e.match(a)&&!r&&(r=!0,n=n.concat(e.match(a)||[]))}}catch(e){console.error(e)}const a=[];for(const e of n){const o=e.match(/\d+(\D+)\d+/g);let n=parseInt(e.replace(/[^\d]/g,""));const r=e.replace(/\,|\.|\d/g,"");o||(n*=100),r&&a.push({price:n,devise:t.getDevise(r)})}return a.filter(((e,t)=>a.findIndex((t=>t.price===e.price&&t.devise===e.devise))===t)).sort(((e,t)=>e.price-t.price))},t.getDevise=e=>{if(!e)return"EUR";let t=e=e.replace(/\s/g,"");if(Object.keys(n).includes(e))return e;for(const t of Object.keys(n))if(n[t].indexOf(e))return t;return t};const n={EUR:["EUR","Euro","Euros","€"],USD:["USD","US Dollar","$"],AFN:["AFN","Afghani","؋"],ALL:["ALL","Lek"],DZD:["DZD","Algerian Dinar"],AOA:["AOA","Kwanza"],XCD:["XCD","East Caribbean Dollar","$"],ARS:["ARS","Argentine Peso","$"],AMD:["AMD","Armenian Dram"],AWG:["AWG","Aruban Florin","ƒ"],AUD:["AUD","Australian Dollar","$"],AZN:["AZN","Azerbaijanian Manat","₼"],BSD:["BSD","Bahamian Dollar","$"],BHD:["BHD","Bahraini Dinar"],BDT:["BDT","Taka"],BBD:["BBD","Barbados Dollar","$"],BYN:["BYN","Belarussian Ruble","Br"],BZD:["BZD","Belize Dollar","BZ$"],XOF:["XOF","CFA Franc BCEAO"],BMD:["BMD","Bermudian Dollar","$"],BTN:["BTN","Ngultrum"],INR:["INR","Indian Rupee",""],BOB:["BOB","Boliviano","$b"],BOV:["BOV","Mvdol"],BAM:["BAM","Convertible Mark","KM"],BWP:["BWP","Pula","P"],NOK:["NOK","Norwegian Krone","kr"],BRL:["BRL","Brazilian Real","R$"],BND:["BND","Brunei Dollar","$"],BGN:["BGN","Bulgarian Lev","лв"],BIF:["BIF","Burundi Franc"],CVE:["CVE","Cabo Verde Escudo"],KHR:["KHR","Riel","៛"],XAF:["XAF","CFA Franc BEAC"],CAD:["CAD","Canadian Dollar","$"],KYD:["KYD","Cayman Islands Dollar","$"],CLF:["CLF","Unidad de Fomento"],CLP:["CLP","Chilean Peso","$"],CNY:["CNY","Yuan Renminbi","¥"],COP:["COP","Colombian Peso","$"],COU:["COU","Unidad de Valor Real"],KMF:["KMF","Comoro Franc"],CDF:["CDF","Congolese Franc"],NZD:["NZD","New Zealand Dollar","$"],CRC:["CRC","Costa Rican Colon","₡"],HRK:["HRK","Kuna","kn"],CUC:["CUC","Peso Convertible"],CUP:["CUP","Cuban Peso","₱"],ANG:["ANG","Netherlands Antillean Guilder","ƒ"],CZK:["CZK","Czech Koruna","Kč"],DKK:["DKK","Danish Krone","kr"],DJF:["DJF","Djibouti Franc"],DOP:["DOP","Dominican Peso","RD$"],EGP:["EGP","Egyptian Pound","£"],SVC:["SVC","El Salvador Colon","$"],ERN:["ERN","Nakfa"],ETB:["ETB","Ethiopian Birr"],FKP:["FKP","Falkland Islands Pound","£"],FJD:["FJD","Fiji Dollar","$"],XPF:["XPF","CFP Franc"],GMD:["GMD","Dalasi"],GEL:["GEL","Lari"],GHS:["GHS","Ghana Cedi","¢"],GIP:["GIP","Gibraltar Pound","£"],GTQ:["GTQ","Quetzal","Q"],GBP:["GBP","Pound Sterling","£"],GNF:["GNF","Guinea Franc"],GYD:["GYD","Guyana Dollar","$"],HTG:["HTG","Gourde"],HNL:["HNL","Lempira","L"],HKD:["HKD","Hong Kong Dollar","$"],HUF:["HUF","Forint","Ft"],ISK:["ISK","Iceland Krona","kr"],IDR:["IDR","Rupiah","Rp"],XDR:["XDR","SDR (Special Drawing Right)"],IRR:["IRR","Iranian Rial","﷼"],IQD:["IQD","Iraqi Dinar"],ILS:["ILS","New Israeli Sheqel","₪"],JMD:["JMD","Jamaican Dollar","J$"],JPY:["JPY","Yen","¥"],JOD:["JOD","Jordanian Dinar"],KZT:["KZT","Tenge","лв"],KES:["KES","Kenyan Shilling"],KPW:["KPW","North Korean Won","₩"],KRW:["KRW","Won","₩"],KWD:["KWD","Kuwaiti Dinar"],KGS:["KGS","Som","лв"],LAK:["LAK","Kip","₭"],LBP:["LBP","Lebanese Pound","£"],LSL:["LSL","Loti"],ZAR:["ZAR","Rand","R"],LRD:["LRD","Liberian Dollar","$"],LYD:["LYD","Libyan Dinar"],CHF:["CHF","Swiss Franc"],MOP:["MOP","Pataca"],MGA:["MGA","Malagasy Ariary"],MWK:["MWK","Kwacha"],MYR:["MYR","Malaysian Ringgit","RM"],MVR:["MVR","Rufiyaa"],MRU:["MRU","Ouguiya"],MUR:["MUR","Mauritius Rupee","₨"],XUA:["XUA","ADB Unit of Account"],MXN:["MXN","Mexican Peso","$"],MXV:["MXV","Mexican Unidad de Inversion (UDI)"],MDL:["MDL","Moldovan Leu"],MNT:["MNT","Tugrik","₮"],MAD:["MAD","Moroccan Dirham"],MZN:["MZN","Mozambique Metical","MT"],MMK:["MMK","Kyat"],NAD:["NAD","Namibia Dollar","$"],NPR:["NPR","Nepalese Rupee","₨"],NIO:["NIO","Cordoba Oro","C$"],NGN:["NGN","Naira","₦"],OMR:["OMR","Rial Omani","﷼"],PKR:["PKR","Pakistan Rupee","₨"],PAB:["PAB","Balboa","B/."],PGK:["PGK","Kina"],PYG:["PYG","Guarani","Gs"],PEN:["PEN","Nuevo Sol","S/."],PHP:["PHP","Philippine Peso","₱"],PLN:["PLN","Zloty","zł"],QAR:["QAR","Qatari Rial","﷼"],MKD:["MKD","Denar","ден"],RON:["RON","Romanian Leu","lei"],RUB:["RUB","Russian Ruble","₽"],RWF:["RWF","Rwanda Franc"],SHP:["SHP","Saint Helena Pound","£"],WST:["WST","Tala"],STN:["STN","Dobra"],SAR:["SAR","Saudi Riyal","﷼"],RSD:["RSD","Serbian Dinar","Дин."],SCR:["SCR","Seychelles Rupee","₨"],SLL:["SLL","Leone"],SGD:["SGD","Singapore Dollar","$"],XSU:["XSU","Sucre"],SBD:["SBD","Solomon Islands Dollar","$"],SOS:["SOS","Somali Shilling","S"],SSP:["SSP","South Sudanese Pound"],LKR:["LKR","Sri Lanka Rupee","₨"],SDG:["SDG","Sudanese Pound"],SRD:["SRD","Surinam Dollar","$"],SZL:["SZL","Lilangeni"],SEK:["SEK","Swedish Krona","kr"],CHE:["CHE","WIR Euro"],CHW:["CHW","WIR Franc"],SYP:["SYP","Syrian Pound","£"],TWD:["TWD","New Taiwan Dollar","NT$"],TJS:["TJS","Somoni"],TZS:["TZS","Tanzanian Shilling"],THB:["THB","Baht","฿"],TOP:["TOP","Pa’anga"],TTD:["TTD","Trinidad and Tobago Dollar","TT$"],TND:["TND","Tunisian Dinar"],TRY:["TRY","Turkish Lira",""],TMT:["TMT","Turkmenistan New Manat"],UGX:["UGX","Uganda Shilling"],UAH:["UAH","Hryvnia","₴"],AED:["AED","UAE Dirham"],USN:["USN","US Dollar (Next day)"],UYI:["UYI","Uruguay Peso en Unidades Indexadas (URUIURUI)"],UYU:["UYU","Peso Uruguayo","$U"],UZS:["UZS","Uzbekistan Sum","лв"],VUV:["VUV","Vatu"],VEF:["VEF","Bolivar","Bs"],VND:["VND","Dong","₫"],YER:["YER","Yemeni Rial","﷼"],ZMW:["ZMW","Zambian Kwacha"],ZWL:["ZWL","Zimbabwe Dollar"]}},804:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>e.innerText.replace(/\n/g," ")},677:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,a){function i(e){try{s(n.next(e))}catch(e){a(e)}}function l(e){try{s(n.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,l)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=o(906),a=o(278),i=o(231),l=o(869),s=o(982),c=o(627),A=o(746),u=o(407),R=o(804);t.default=e=>n(void 0,void 0,void 0,(function*(){try{const t={};let o=yield u.default(e);t.pictures=o,t.image=o[0]?o[0]:{},t.description=R.default(e),t.prices=r.default(t.description),t.price=t.prices[0]?t.prices[0]:{},t.offers=A.default(t.description),t.tags=o[0]&&o[0].tags?o[0].tags:[],t.additionalProperty=a.default(e),t.sku=i.default(e,"sku"),t.url=c.default(e),t.productID=i.default(e,"id");const n=l.default(e);return t.additionalProperty=Object.assign(t.additionalProperty,n),t.material=s.default(e),t}catch(e){return console.error("SchemmaORG ",e),{}}}))}},t={};return function o(n){if(t[n])return t[n].exports;var r=t[n]={exports:{}};return e[n].call(r.exports,r,r.exports,o),r.exports}(9)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXRoU2NyaXB0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9wYXRoU2NyaXB0Ly4vc3JjL2V2ZW50cy9hbmltYXRlU2Nyb2xsLnRzIiwid2VicGFjazovL3BhdGhTY3JpcHQvLi9zcmMvZXZlbnRzL3Njcm9sbFRvQm90dG9tLnRzIiwid2VicGFjazovL3BhdGhTY3JpcHQvLi9zcmMvZXZlbnRzL3Njcm9sbFRvRWxlbWVudC50cyIsIndlYnBhY2s6Ly9wYXRoU2NyaXB0Ly4vc3JjL2V4ZWN1dGVQYXRoU2V0dXAudHMiLCJ3ZWJwYWNrOi8vcGF0aFNjcmlwdC8uL3NyYy9wYXJzZXJzL0F0dHJpYnV0ZUxpa2UudHMiLCJ3ZWJwYWNrOi8vcGF0aFNjcmlwdC8uL3NyYy9wYXJzZXJzL0F0dHJpYnV0ZXMudHMiLCJ3ZWJwYWNrOi8vcGF0aFNjcmlwdC8uL3NyYy9wYXJzZXJzL0dldFVybC50cyIsIndlYnBhY2s6Ly9wYXRoU2NyaXB0Ly4vc3JjL3BhcnNlcnMvSXRlbVByb3BzLnRzIiwid2VicGFjazovL3BhdGhTY3JpcHQvLi9zcmMvcGFyc2Vycy9NYXRlcmlhbC50cyIsIndlYnBhY2s6Ly9wYXRoU2NyaXB0Ly4vc3JjL3BhcnNlcnMvT2ZmZXJzLnRzIiwid2VicGFjazovL3BhdGhTY3JpcHQvLi9zcmMvcGFyc2Vycy9QaWN0dXJlc0xpc3QudHMiLCJ3ZWJwYWNrOi8vcGF0aFNjcmlwdC8uL3NyYy9wYXJzZXJzL1ByaWNlUGFyc2VyLnRzIiwid2VicGFjazovL3BhdGhTY3JpcHQvLi9zcmMvcGFyc2Vycy9Ub1RleHQudHMiLCJ3ZWJwYWNrOi8vcGF0aFNjcmlwdC8uL3NyYy9wYXJzZXJzL3Byb2R1Y3RTY2hlbWUudHMiLCJ3ZWJwYWNrOi8vcGF0aFNjcmlwdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wYXRoU2NyaXB0L3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImFuaW1hdGVTY3JvbGwiLCJkZWxheSIsInN0YXJ0WSIsInN0YXJ0WCIsInBvc1kiLCJwb3NYIiwiY29tcGxldGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNoYW5nZVgiLCJjaGFuZ2VZIiwiY3VycmVudFRpbWUiLCJpbmNyZW1lbnQiLCJNYXRoIiwiZWFzZUluT3V0UXVhZCIsInQiLCJiIiwiYyIsImQiLCJ2YWxZIiwidmFsWCIsIndpbmRvdyIsInNjcm9sbCIsInNldFRpbWVvdXQiLCJtZXNzYWdlIiwiYmluZCIsInRoaXMiLCJlcnIiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJhbmltYXRlU2Nyb2xsXzEiLCJkZWZhdWx0Iiwic2Nyb2xsRW5kIiwiZG9jdW1lbnQiLCJib2R5Iiwic2Nyb2xsSGVpZ2h0IiwiZmluaXNoZWQiLCJzdGF0dXMiLCJzY3JvbGxZIiwic2Nyb2xsWCIsInRhcmdldCIsImV2ZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwieSIsIngiLCJfX2FzeW5jVmFsdWVzIiwibyIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJUeXBlRXJyb3IiLCJpIiwibSIsImNhbGwiLCJfX3ZhbHVlcyIsIml0ZXJhdG9yIiwidmVyYiIsIm4iLCJ2Iiwic2V0dGxlIiwiaGVsbG9QdXBwZXRlZXIiLCJnZXRJdGVtIiwicHJvY2Vzc0xpc3RJdGVtIiwicHJvY2Vzc1Njcm9sbFRvQm90dG9tIiwicHJvY2Vzc0xvYWRNb3JlQnV0dG9uIiwiYmlnZVBhdGgiLCJzY3JvbGxUb0JvdHRvbV8xIiwic2Nyb2xsVG9FbGVtZW50XzEiLCJwcm9kdWN0U2NoZW1lXzEiLCJzZXR1cCIsImNhbGxiYWNrIiwiY29uc29sZSIsImxvZyIsImVfMSIsIl9hIiwicmVzcG9uc2UiLCJzdGF0aWMiLCJ1cmwiLCJsb2NhdGlvbiIsImhyZWYiLCJsaXN0Iiwic3RhdCIsInN0YXRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInNlbGVjdG9yIiwibGFiZWwiLCJ0ZXh0Q29udGVudCIsIm5hdmlnYXRpb24iLCJtb2RlIiwicmVzIiwiX2MiLCJfYiIsImxpc3RzIiwiY29uY2F0IiwiZV8xXzEiLCJlcnJvciIsInJldHVybiIsImVfMiIsIl9kIiwiX2YiLCJfZSIsIm5ld3MiLCJlXzJfMSIsImxvYWRNb3JlIiwibG9hZE1vcmVTZWxlY3RvciIsImNsaWNrIiwiZV8zIiwiX2ciLCJfaiIsIl9oIiwiZV8zXzEiLCJlXzQiLCJsaXN0VGFyZ2V0IiwicXVlcnlTZWxlY3RvckFsbCIsImxpc3RUYXJnZXRfMV8xIiwibGlzdFRhcmdldF8xIiwibGlzdFRhciIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZGF0YSIsInB1c2giLCJhZGQiLCJlXzRfMSIsInNjaGVtZSIsInN0ciIsInNjcm9sbFRvQm90dG9tIiwiQXR0cmlidXRlc18xIiwidmVyYm9zZSIsInNrdSIsImF0dHJpYnV0ZXMiLCJhdHRyIiwia2V5cyIsImluZGV4T2YiLCJleGNsdWRlVGFncyIsImluY2x1ZGVzIiwibmFtZSIsImNoaWxkcyIsImNoaWxkcmVuIiwiaHJlZnMiLCJsZW5ndGgiLCJsaW5rIiwiZ2V0QXR0cmlidXRlIiwic29ydCIsImEiLCJpdGVtc1Byb3AiLCJpdGVtIiwicmVwbGFjZSIsIm9mZmVyUmVnIiwiUmVnRXhwIiwiaGFzRW50cmllcyIsIm1hdGNoIiwiZW50cnkiLCJvcGVyYXRvciIsImFtb3VudCIsInJlZHVjZXIiLCJpbWFnZXMiLCJwaWN0dXJlIiwiZGVzYyIsImRhdGFTcmNTZXQiLCJzcmNTZXRMaXN0Iiwic3BsaXQiLCJwaXgiLCJ1cmkiLCJmaW5kSW5kZXgiLCJkZXNjcmlwdGlvbiIsInNyY3NldCIsImdldERldmlzZSIsImRldmlzZXMiLCJhbGxQcmljZXMiLCJkZXZpc2UiLCJtaWRkbGVSZWciLCJzdGFydFJlZyIsImVuZFJlZyIsInByaWNlTGlzdCIsInByaWNlIiwic2VwYXJhdG9yIiwiaW50ZWdlciIsInBhcnNlSW50IiwiZmlsdGVyIiwiY3VycmVuY3kiLCJjdXIiLCJpbm5lclRleHQiLCJQcmljZVBhcnNlcl8xIiwiQXR0cmlidXRlTGlrZV8xIiwiSXRlbVByb3BzXzEiLCJNYXRlcmlhbF8xIiwiR2V0VXJsXzEiLCJPZmZlcnNfMSIsIlBpY3R1cmVzTGlzdF8xIiwiVG9UZXh0XzEiLCJwaWN0dXJlcyIsImltYWdlIiwicHJpY2VzIiwib2ZmZXJzIiwidGFncyIsImFkZGl0aW9uYWxQcm9wZXJ0eSIsInByb2R1Y3RJRCIsInByb3BzIiwiYXNzaWduIiwibWF0ZXJpYWwiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLEdBQUlILEdBQ2UsaUJBQVpDLFFBQ2RBLFFBQW9CLFdBQUlELElBRXhCRCxFQUFpQixXQUFJQyxJQVJ2QixDQVNHSyxNQUFNLFdBQ1QsTSxzQ0NEQUMsT0FBT0MsZUFBZU4sRUFBUyxhQUFjLENBQUVPLE9BQU8sSUFDdERQLEVBQVFRLG1CQUFnQixFQUN4QlIsRUFBUVEsY0FBZ0IsQ0FBQ0MsRUFBT0MsRUFBUUMsRUFBUUMsRUFBTUMsRUFBTUMsSUFHakQsSUFBSUMsU0FBUSxTQUFVQyxFQUFTQyxHQUNsQyxJQUNJLE1BQU1DLEVBQVVMLEVBQU9GLEVBQ2pCUSxFQUFVUCxFQUFPRixFQUN2QixJQUFJVSxFQUFjLEVBQ2xCLE1BQU1DLEVBQVksR0FDbEJDLEtBQUtDLGNBQWdCLFNBQVVDLEVBQUdDLEVBQUdDLEVBQUdDLEdBRXBDLE9BREFILEdBQUtHLEVBQUksR0FDRCxFQUNJRCxFQUFJLEVBQUtGLEVBQUlBLEVBQUlDLEdBRXBCQyxFQUFJLEtBRGJGLEdBQ3dCQSxFQUFJLEdBQUssR0FBS0MsR0FFMUMsTUFBTWpCLEVBQWdCLFdBQ2xCWSxHQUFlQyxFQUNmLE1BQU1PLEVBQU9OLEtBQUtDLGNBQWNILEVBQWFWLEVBQVFTLEVBQVNWLEdBQ3hEb0IsRUFBT1AsS0FBS0MsY0FBY0gsRUFBYVQsRUFBUU8sRUFBU1QsR0FDOURxQixPQUFPQyxPQUFPRixFQUFNRCxHQUNoQlIsRUFBY1gsRUFDZHVCLFdBQVd4QixFQUFlYSxJQUd0QlAsR0FDQUEsRUFBUyxDQUFFbUIsUUFBUyxhQUN4QmpCLEVBQVEsQ0FBRWlCLFFBQVMsZUFFekJDLEtBQUtDLE1BQ1AzQixJQUVKLE1BQU80QixHQUNIbkIsRUFBT21CLFEsb0JDdkNuQixJQUFJQyxFQUFhRixNQUFRQSxLQUFLRSxXQUFjLFNBQVVDLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTFFLE9BQU8sSUFBS0QsSUFBTUEsRUFBSXpCLFdBQVUsU0FBVUMsRUFBU0MsR0FDL0MsU0FBU3lCLEVBQVVuQyxHQUFTLElBQU1vQyxFQUFLRixFQUFVRyxLQUFLckMsSUFBVyxNQUFPc0MsR0FBSzVCLEVBQU80QixJQUNwRixTQUFTQyxFQUFTdkMsR0FBUyxJQUFNb0MsRUFBS0YsRUFBaUIsTUFBRWxDLElBQVcsTUFBT3NDLEdBQUs1QixFQUFPNEIsSUFDdkYsU0FBU0YsRUFBS0ksR0FKbEIsSUFBZXhDLEVBSWF3QyxFQUFPQyxLQUFPaEMsRUFBUStCLEVBQU94QyxRQUoxQ0EsRUFJeUR3QyxFQUFPeEMsTUFKaERBLGFBQWlCaUMsRUFBSWpDLEVBQVEsSUFBSWlDLEdBQUUsU0FBVXhCLEdBQVdBLEVBQVFULE9BSVQwQyxLQUFLUCxFQUFXSSxHQUNsR0gsR0FBTUYsRUFBWUEsRUFBVVMsTUFBTVosRUFBU0MsR0FBYyxLQUFLSyxZQUd0RXZDLE9BQU9DLGVBQWVOLEVBQVMsYUFBYyxDQUFFTyxPQUFPLElBQ3RELE1BQU00QyxFQUFrQixFQUFRLEtBQ2hDbkQsRUFBUW9ELFFBQVUsQ0FBQzNDLEVBQVEsT0FDbkJzQixRQUNPLElBQUloQixTQUFRLENBQUNDLEVBQVNDLElBQVdvQixPQUFVLE9BQVEsT0FBUSxHQUFRLFlBQ3RFLElBQ0ksSUFBSWdCLEVBQVlDLFNBQVNDLEtBQUtDLGFBQzlCLE1BQU1DLEVBQVcsV0FFYnpCLFlBQVcsV0FDSHFCLElBQWNDLFNBQVNDLEtBQUtDLGFBQzVCeEMsRUFBUSxDQUFFMEMsT0FBUSxjQUdsQkwsRUFBWUMsU0FBU0MsS0FBS0MsYUFDMUJMLEVBQWdCM0MsY0FBY0MsRUFBT3FCLE9BQU82QixRQUFTN0IsT0FBTzhCLFFBQVNQLEVBQVcsRUFBR0ksTUFFeEYsSUFBTWhELElBRWIwQyxFQUFnQjNDLGNBQWNDLEVBQU9xQixPQUFPNkIsUUFBUzdCLE9BQU84QixRQUFTUCxFQUFXLEVBQUdJLEdBRXZGLE1BQU9yQixHQUNIbkIsRUFBT21CLFUsb0JDN0J2QixJQUFJQyxFQUFhRixNQUFRQSxLQUFLRSxXQUFjLFNBQVVDLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTFFLE9BQU8sSUFBS0QsSUFBTUEsRUFBSXpCLFdBQVUsU0FBVUMsRUFBU0MsR0FDL0MsU0FBU3lCLEVBQVVuQyxHQUFTLElBQU1vQyxFQUFLRixFQUFVRyxLQUFLckMsSUFBVyxNQUFPc0MsR0FBSzVCLEVBQU80QixJQUNwRixTQUFTQyxFQUFTdkMsR0FBUyxJQUFNb0MsRUFBS0YsRUFBaUIsTUFBRWxDLElBQVcsTUFBT3NDLEdBQUs1QixFQUFPNEIsSUFDdkYsU0FBU0YsRUFBS0ksR0FKbEIsSUFBZXhDLEVBSWF3QyxFQUFPQyxLQUFPaEMsRUFBUStCLEVBQU94QyxRQUoxQ0EsRUFJeUR3QyxFQUFPeEMsTUFKaERBLGFBQWlCaUMsRUFBSWpDLEVBQVEsSUFBSWlDLEdBQUUsU0FBVXhCLEdBQVdBLEVBQVFULE9BSVQwQyxLQUFLUCxFQUFXSSxHQUNsR0gsR0FBTUYsRUFBWUEsRUFBVVMsTUFBTVosRUFBU0MsR0FBYyxLQUFLSyxZQUd0RXZDLE9BQU9DLGVBQWVOLEVBQVMsYUFBYyxDQUFFTyxPQUFPLElBQ3RELE1BQU00QyxFQUFrQixFQUFRLEtBQ2hDbkQsRUFBUW9ELFFBQVdTLEdBQ1IsSUFBSTlDLFNBQVEsQ0FBQ0MsRUFBU0MsSUFBV29CLE9BQVUsT0FBUSxPQUFRLEdBQVEsWUFDdEUsR0FBSXdCLEVBQVEsQ0FDUixNQUFNQyxRQUFjWCxFQUFnQjNDLGNBQWMsSUFBS3NCLE9BQU82QixRQUFTN0IsT0FBTzhCLFFBQVM5QixPQUFPNkIsUUFBVUUsRUFBT0Usd0JBQXdCQyxFQUFHbEMsT0FBTzhCLFFBQVVDLEVBQU9FLHdCQUF3QkUsRUFBRyxNQUN6TEgsRUFDQTlDLEVBQVE4QyxHQUVSN0MsRUFBTzZDLFFBR1g5QyxHQUFRLFMsa0JDZnBCLElBQUlxQixFQUFhRixNQUFRQSxLQUFLRSxXQUFjLFNBQVVDLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTFFLE9BQU8sSUFBS0QsSUFBTUEsRUFBSXpCLFdBQVUsU0FBVUMsRUFBU0MsR0FDL0MsU0FBU3lCLEVBQVVuQyxHQUFTLElBQU1vQyxFQUFLRixFQUFVRyxLQUFLckMsSUFBVyxNQUFPc0MsR0FBSzVCLEVBQU80QixJQUNwRixTQUFTQyxFQUFTdkMsR0FBUyxJQUFNb0MsRUFBS0YsRUFBaUIsTUFBRWxDLElBQVcsTUFBT3NDLEdBQUs1QixFQUFPNEIsSUFDdkYsU0FBU0YsRUFBS0ksR0FKbEIsSUFBZXhDLEVBSWF3QyxFQUFPQyxLQUFPaEMsRUFBUStCLEVBQU94QyxRQUoxQ0EsRUFJeUR3QyxFQUFPeEMsTUFKaERBLGFBQWlCaUMsRUFBSWpDLEVBQVEsSUFBSWlDLEdBQUUsU0FBVXhCLEdBQVdBLEVBQVFULE9BSVQwQyxLQUFLUCxFQUFXSSxHQUNsR0gsR0FBTUYsRUFBWUEsRUFBVVMsTUFBTVosRUFBU0MsR0FBYyxLQUFLSyxZQUdsRXNCLEVBQWlCL0IsTUFBUUEsS0FBSytCLGVBQWtCLFNBQVVDLEdBQzFELElBQUtDLE9BQU9DLGNBQWUsTUFBTSxJQUFJQyxVQUFVLHdDQUMvQyxJQUFpQ0MsRUFBN0JDLEVBQUlMLEVBQUVDLE9BQU9DLGVBQ2pCLE9BQU9HLEVBQUlBLEVBQUVDLEtBQUtOLElBQU1BLEVBQXdCLG1CQUFiTyxTQUEwQkEsU0FBU1AsR0FBS0EsRUFBRUMsT0FBT08sWUFBYUosRUFBSSxHQUFJSyxFQUFLLFFBQVNBLEVBQUssU0FBVUEsRUFBSyxVQUFXTCxFQUFFSCxPQUFPQyxlQUFpQixXQUFjLE9BQU9sQyxNQUFTb0MsR0FDOU0sU0FBU0ssRUFBS0MsR0FBS04sRUFBRU0sR0FBS1YsRUFBRVUsSUFBTSxTQUFVQyxHQUFLLE9BQU8sSUFBSS9ELFNBQVEsU0FBVUMsRUFBU0MsSUFDdkYsU0FBZ0JELEVBQVNDLEVBQVFVLEVBQUdtRCxHQUFLL0QsUUFBUUMsUUFBUThELEdBQUc3QixNQUFLLFNBQVM2QixHQUFLOUQsRUFBUSxDQUFFVCxNQUFPdUUsRUFBRzlCLEtBQU1yQixNQUFTVixHQURKOEQsQ0FBTy9ELEVBQVNDLEdBQTdCNkQsRUFBSVgsRUFBRVUsR0FBR0MsSUFBOEI5QixLQUFNOEIsRUFBRXZFLGFBR3BKRixPQUFPQyxlQUFlTixFQUFTLGFBQWMsQ0FBRU8sT0FBTyxJQUN0RFAsRUFBUWdGLGVBQWlCaEYsRUFBUWlGLFFBQVVqRixFQUFRa0YsZ0JBQWtCbEYsRUFBUW1GLHNCQUF3Qm5GLEVBQVFvRixzQkFBd0JwRixFQUFRcUYsY0FBVyxFQUN4SixNQUFNQyxFQUFtQixFQUFRLEtBQzNCQyxFQUFvQixFQUFRLEtBQzVCQyxFQUFrQixFQUFRLEtBQ2hDeEYsRUFBUXFGLFNBQVcsQ0FBQ0ksRUFBT0MsSUFBYXJELE9BQVUsT0FBUSxPQUFRLEdBQVEsWUFFdEUsT0FEQXNELFFBQVFDLElBQUksWUFDTCxJQUFJN0UsU0FBU0MsR0FBWXFCLE9BQVUsT0FBUSxPQUFRLEdBQVEsWUFDOUQsSUFBSXdELEVBQUtDLEVBQ1RILFFBQVFDLElBQUksY0FDWixNQUFNRyxFQUFXLENBQ2JDLE9BQVEsQ0FDSkMsSUFBS25FLE9BQU9vRSxTQUFTQyxNQUV6QkMsS0FBTSxHQUNObkUsUUFBUyxTQUViMEQsUUFBUUMsSUFBSSxXQUNaLElBRUksR0FEQUcsRUFBUzlELFFBQVUsTUFDZndELEVBQU1PLE9BQ04sSUFBSyxNQUFNSyxLQUFRWixFQUFNTyxPQUFRLENBQzdCLE1BQU1NLEVBQWNoRCxTQUFTaUQsY0FBY0YsRUFBS0csVUFDNUNGLElBQ0FQLEVBQVNDLE9BQU9LLEVBQUtJLE9BQVNILEVBQVlJLGFBTXRELEdBSEFmLFFBQVFDLElBQUksaUJBQ1pHLEVBQVM5RCxRQUFVLGdCQUNuQjBELFFBQVFDLElBQUksb0JBQXFCSCxFQUFNa0IsYUFDbkNsQixFQUFNa0IsV0F5Q04sT0FGQWpCLEVBQVMsQ0FBRUssU0FBVUEsSUFDckIvRSxFQUFRK0UsR0FDREEsRUF2Q1AsR0FEQUEsRUFBUzlELFFBQVUsa0JBQW9Cd0QsRUFBTWtCLFdBQ2YsYUFBMUJsQixFQUFNa0IsV0FBV0MsS0FDakJqQixRQUFRQyxJQUFJLHNCQUNaRyxFQUFTOUQsUUFBVSxnQ0FDYmpDLEVBQVFvRixzQkFBc0JLLEVBQU9NLEVBQVNLLE1BQU0sU0FBVVMsR0FHaEUsT0FGQWxCLFFBQVFDLElBQUksYUFBY2lCLEdBQzFCZCxFQUFTSyxLQUFPUyxFQUNUQSxLQUVYbEIsUUFBUUMsSUFBSSxnQkFDWjVFLEVBQVErRSxRQUVQLEdBQThCLG1CQUExQk4sRUFBTWtCLFdBQVdDLEtBQ3RCYixFQUFTOUQsUUFBVSx1Q0FDbkI4RCxFQUFTSyxXQUFhcEcsRUFBUW1GLHNCQUFzQk0sRUFBT00sRUFBU0ssTUFBTSxTQUFVTCxHQUNoRixPQUFPQSxLQUVYL0UsRUFBUStFLFFBRVAsR0FBOEIsZUFBMUJOLEVBQU1rQixXQUFXQyxLQUF1QixDQUM3Q2IsRUFBUzlELFFBQVUsdUNBQ25CLElBQ0ksSUFBSyxJQUFxQzZFLEVBQWpDQyxFQUFLN0MsRUFBY3VCLEVBQU11QixTQUFZRixRQUFXQyxFQUFHbkUsUUFBWUksTUFBTyxDQUMzRSxNQUFNb0QsRUFBT1UsRUFBR3ZHLE1BQ2hCd0YsRUFBU0ssS0FBT0wsRUFBU0ssS0FBS2EsT0FBT2xCLEVBQVNLLFdBQVlwRyxFQUFRa0YsZ0JBQWdCa0IsRUFBS3ZDLE9BQU8yQyxZQUd0RyxNQUFPVSxHQUFTckIsRUFBTSxDQUFFc0IsTUFBT0QsR0FDL0IsUUFDSSxJQUNRSixJQUFPQSxFQUFHOUQsT0FBUzhDLEVBQUtpQixFQUFHSyxnQkFBZXRCLEVBQUdyQixLQUFLc0MsSUFFMUQsUUFBVSxHQUFJbEIsRUFBSyxNQUFNQSxFQUFJc0IsT0FFakNuRyxFQUFRK0UsSUFTcEIsTUFBTzNELEdBSUgsT0FIQXVELFFBQVFDLElBQUksYUFDWkYsRUFBUyxDQUFFSyxTQUFVQSxFQUFVM0QsSUFBS0EsSUFDcENwQixFQUFRK0UsR0FDRCxDQUFFb0IsTUFBTy9FLEVBQUtILFFBQVMsb0JBRWxDeUQsRUFBUyxDQUFFSyxTQUFVQSxZQUc3Qi9GLEVBQVFvRixzQkFBd0IsQ0FBQ0ssRUFBT00sRUFBVUwsSUFBYXJELE9BQVUsT0FBUSxPQUFRLEdBQVEsWUFDN0YsSUFBSWdGLEVBQUtDLEVBQ1QzQixRQUFRQyxJQUFJLHlCQUEwQkcsRUFBVU4sRUFBTXVCLE9BQ3RELElBRUksSUFBSyxJQUFxQ08sRUFBakNDLEVBQUt0RCxFQUFjdUIsRUFBTXVCLFNBQVlPLFFBQVdDLEVBQUc1RSxRQUFZSSxNQUFPLENBQzNFLE1BQU1vRCxFQUFPbUIsRUFBR2hILE1BQ1ZrSCxRQUFhekgsRUFBUWtGLGdCQUFnQmtCLEVBQUt2QyxPQUFPMkMsVUFDdkRiLFFBQVFDLElBQUksV0FBWTZCLEVBQU0xQixHQUM5QkEsRUFBV0EsRUFBU2tCLE9BQU9RLElBR25DLE1BQU9DLEdBQVNMLEVBQU0sQ0FBRUYsTUFBT08sR0FDL0IsUUFDSSxJQUNRSCxJQUFPQSxFQUFHdkUsT0FBU3NFLEVBQUtFLEVBQUdKLGdCQUFlRSxFQUFHN0MsS0FBSytDLElBRTFELFFBQVUsR0FBSUgsRUFBSyxNQUFNQSxFQUFJRixPQUVqQyxNQUFNUSxFQUFXckUsU0FBU2lELGNBQWNkLEVBQU1rQixXQUFXaUIsa0JBQ3pELElBQUtELEVBR0QsT0FEQWpDLEVBQVNLLEdBQ0ZBLEVBR1A0QixFQUFTRSxRQUNUN0YsWUFBVyxXQUNQaEMsRUFBUW9GLHNCQUFzQkssRUFBT00sRUFBVUwsS0FDaEQsUUFHWDFGLEVBQVFtRixzQkFBd0IsQ0FBQ00sRUFBT00sRUFBVUwsSUFBYXJELE9BQVUsT0FBUSxPQUFRLEdBQVEsWUFDN0YsSUFBSXlGLEVBQUtDLFFBQ0h6QyxFQUFpQmxDLFFBQVEsS0FDL0IsSUFDSSxJQUFLLElBQXFDNEUsRUFBakNDLEVBQUsvRCxFQUFjdUIsRUFBTXVCLFNBQVlnQixRQUFXQyxFQUFHckYsUUFBWUksTUFBTyxDQUMzRSxNQUFNb0QsRUFBTzRCLEVBQUd6SCxNQUNoQndGLEVBQVdBLEVBQVNrQixPQUFPbEIsUUFBZ0IvRixFQUFRa0YsZ0JBQWdCa0IsRUFBS3ZDLE9BQU8yQyxZQUd2RixNQUFPMEIsR0FBU0osRUFBTSxDQUFFWCxNQUFPZSxHQUMvQixRQUNJLElBQ1FGLElBQU9BLEVBQUdoRixPQUFTK0UsRUFBS0UsRUFBR2IsZ0JBQWVXLEVBQUd0RCxLQUFLd0QsSUFFMUQsUUFBVSxHQUFJSCxFQUFLLE1BQU1BLEVBQUlYLE9BR2pDLE9BREF6QixFQUFTSyxHQUNGQSxLQUVYL0YsRUFBUWtGLGdCQUFtQnNCLElBQ3ZCLElBQUlULEVBQVcsR0FDZixPQUFPLElBQUloRixTQUFRLENBQUNDLEVBQVNDLElBQVdvQixPQUFVLE9BQVEsT0FBUSxHQUFRLFlBQ3RFLElBQUk4RixFQUFLckMsRUFDVCxNQUFNc0MsRUFBYTlFLFNBQVMrRSxpQkFBaUI3QixHQUM3QyxJQUNJLElBQ0ksSUFBSyxJQUE4QzhCLEVBQTFDQyxFQUFlckUsRUFBY2tFLEtBQTZCRSxRQUF1QkMsRUFBYTNGLFFBQXdCSSxNQUFPLENBQ2xJLE1BQU13RixFQUFVRixFQUFlL0gsTUFDL0IsSUFBS2lJLEVBQVFDLFVBQVVDLFNBQVMsYUFBYyxDQUMxQyxNQUFNQyxRQUFhM0ksRUFBUWlGLFFBQVF1RCxHQUMvQkcsR0FDQTVDLEVBQVM2QyxLQUFLRCxHQUNsQkgsRUFBUUMsVUFBVUksSUFBSSxlQUlsQyxNQUFPQyxHQUFTWCxFQUFNLENBQUVoQixNQUFPMkIsR0FDL0IsUUFDSSxJQUNRUixJQUFtQkEsRUFBZXRGLE9BQVM4QyxFQUFLeUMsRUFBYW5CLGdCQUFldEIsRUFBR3JCLEtBQUs4RCxJQUU1RixRQUFVLEdBQUlKLEVBQUssTUFBTUEsRUFBSWhCLE9BRWpDbkcsRUFBUStFLEdBRVosTUFBTzNELEdBQ0huQixFQUFPbUIsVUFJbkJwQyxFQUFRaUYsUUFBV3VELEdBQ1IsSUFBSXpILFNBQVEsQ0FBQ0MsRUFBU0MsSUFBV29CLE9BQVUsT0FBUSxPQUFRLEdBQVEsWUFDdEUsSUFDSSxHQUFLbUcsRUFBUUMsVUFBVUMsU0FBUyxpQkFTNUIxSCxFQUFRLFVBVHNDLE9BQ3hDdUUsRUFBa0JuQyxRQUFRb0YsR0FHaENBLEVBQVFDLFVBQVVJLElBQUksaUJBQ3RCLE1BQU1FLFFBQWV2RCxFQUFnQnBDLFFBQVFvRixHQUM3Q3hILEVBQVErSCxJQU1oQixNQUFPM0csR0FDSG5CLEVBQU8sY0FJbkJqQixFQUFRZ0YsZUFBa0JnRSxHQUFRM0csT0FBVSxPQUFRLE9BQVEsR0FBUSxZQUNoRSxNQUFPLFNBQVMyRyxPQUVwQmxILE9BQU91RCxTQUFXckYsRUFBUXFGLFNBQzFCdkQsT0FBT2tELGVBQWlCaEYsRUFBUWdGLGVBQ2hDbEQsT0FBT21ILGVBQWlCM0QsRUFBaUJsQyxTLGNDcE56Qy9DLE9BQU9DLGVBQWVOLEVBQVMsYUFBYyxDQUFFTyxPQUFPLElBQ3RELE1BQU0ySSxFQUFlLEVBQVEsS0FDN0JsSixFQUFRb0QsUUFBVSxDQUFDUyxFQUFRc0YsS0FDdkIsSUFBSUMsRUFBTSxHQUNWLElBQUt2RixFQUNELE1BQU8sR0FDWCxNQUFNd0YsRUFBYUgsRUFBYTlGLFFBQVFTLEdBQ3hDLElBQUssTUFBTXlGLEtBQVFqSixPQUFPa0osS0FBS0YsSUFDSSxJQUEzQkMsRUFBS0UsUUFBUUwsS0FDYkMsRUFBTUMsRUFBV0MsSUFFekIsT0FBT0YsSSxZQ1pYL0ksT0FBT0MsZUFBZU4sRUFBUyxhQUFjLENBQUVPLE9BQU8sSUFDdEQsTUFBTWtKLEVBQWMsQ0FDaEIsUUFDQSxRQUNBLGNBQ0EsYUFDQSxRQUNBLFNBQ0EsU0FDQSxVQUNBLE9BQ0EsV0FDQSxJQUNBLElBQ0EsUUFDQSxTQUNBLFVBQ0EsT0FDQSxlQUNBLGlCQUNBLG9CQUNBLElBQ0EsVUFDQSxRQUNBLGNBQ0EsWUFDQSxZQUNBLGdCQUNBLFlBQ0EsVUFDQSxvQkFDQSxlQUVKekosRUFBUW9ELFFBQVdTLElBQ2YsTUFBTWtDLEVBQVcsR0FDakIsSUFBSyxNQUFNdUQsS0FBUXpGLEVBQU93RixXQUNqQkksRUFBWUMsU0FBU0osRUFBS0ssUUFDM0I1RCxFQUFTdUQsRUFBS0ssTUFBUUwsRUFBSy9JLE9BRW5DLE1BQU1xSixFQUFTL0YsRUFBT3dFLGlCQUFpQixLQUN2QyxJQUFLLE1BQU13QixLQUFZRCxFQUNuQixJQUFLLE1BQU1OLEtBQVFPLEVBQVNSLFdBQ25CSSxFQUFZQyxTQUFTSixFQUFLSyxRQUMzQjVELEVBQVN1RCxFQUFLSyxNQUFRTCxFQUFLL0ksT0FHdkMsT0FBT3dGLEksWUM3Q1gxRixPQUFPQyxlQUFlTixFQUFTLGFBQWMsQ0FBRU8sT0FBTyxJQUN0RFAsRUFBUW9ELFFBQVdTLElBQ2YsTUFBTWlHLEVBQVFqRyxFQUFPd0UsaUJBQWlCLEtBQ3RDLEdBQUl5QixFQUFNQyxPQUFTLEVBQUcsQ0FDbEIsTUFBTTlELEVBQU0sR0FDWixJQUFLLE1BQU0rRCxLQUFRRixFQUNYRSxFQUFLQyxhQUFhLFVBQWdFLElBQXJERCxFQUFLQyxhQUFhLFFBQVFULFFBQVEsZUFDL0R2RCxFQUFJMkMsS0FBS29CLEVBQUtDLGFBQWEsU0FJbkMsT0FGSWhFLEVBQUk4RCxPQUFTLEdBQ2I5RCxFQUFJaUUsTUFBSyxDQUFDQyxFQUFHMUksSUFBTTBJLEVBQUVKLE9BQVN0SSxFQUFFc0ksU0FDN0I5RCxFQUFJLEdBR1gsTUFBTyxLLFlDZmY1RixPQUFPQyxlQUFlTixFQUFTLGFBQWMsQ0FBRU8sT0FBTyxJQUN0RFAsRUFBUW9ELFFBQVdTLElBQ2YsTUFBTWtDLEVBQVcsR0FDWHFFLEVBQVl2RyxFQUFPd0UsaUJBQWlCLGNBQzFDLElBQUssTUFBTWdDLEtBQVFELEVBQ2ZyRSxFQUFTc0UsRUFBS2hCLFdBQXFCLFNBQUU5SSxPQUFTOEosRUFBS2hCLFdBQW9CLFFBQUlnQixFQUFLaEIsV0FBb0IsUUFBRTlJLE1BQVEsR0FFbEgsT0FBT3dGLEksWUNQWDFGLE9BQU9DLGVBQWVOLEVBQVMsYUFBYyxDQUFFTyxPQUFPLElBQ3REUCxFQUFRb0QsUUFBV1MsR0FFUixJLFlDSFh4RCxPQUFPQyxlQUFlTixFQUFTLGFBQWMsQ0FBRU8sT0FBTyxJQUN0RFAsRUFBUW9ELFFBQVc0RixJQUNmQSxFQUFNQSxFQUFJc0IsUUFBUSxNQUFPLElBQ3pCLE1BQU12RSxFQUFXLEdBQ2pCLElBRUksTUFBTXdFLEVBQVcsSUFBSUMsT0FBTyxjQUFlLEtBQ3JDQyxFQUFhekIsRUFBSTBCLE1BQU1ILEdBQzdCLEdBQUlFLEVBQ0EsSUFBSyxNQUFNRSxLQUFTRixFQUNoQjFFLEVBQVM2QyxLQUFLLENBQ1ZnQyxTQUFVRCxFQUFNRCxNQUFNLE9BQVMsSUFBTSxJQUNyQ0csT0FBUUYsRUFBTUQsTUFBTSxRQUFVQyxFQUFNRCxNQUFNLFFBQVEsR0FBSyxFQUN2REksUUFBUyxNQUt6QixNQUFPMUksR0FDSHVELFFBQVF3QixNQUFNLHVDQUF3Qy9FLEdBRTFELE9BQU8yRCxJLFlDMUJYMUYsT0FBT0MsZUFBZU4sRUFBUyxhQUFjLENBQUVPLE9BQU8sSUFDdERQLEVBQVFvRCxRQUFXUyxJQUNmLE1BQU1rQyxFQUFXLEdBQ2pCLElBQ0ksTUFBTWdGLEVBQVNsSCxFQUFPd0UsaUJBQWlCLE9BQ3ZDLElBQUssTUFBTTJDLEtBQVdELEVBQ2xCLElBQ0ksSUFBSUUsRUFBTyxHQUNQRCxFQUFRM0IsV0FBZ0IsTUFDeEI0QixFQUFPRCxFQUFRM0IsV0FBZ0IsSUFBRTlJLE9BQ3JDLElBQUkwRixFQUFNLEdBQ04rRSxFQUFRM0IsV0FBZ0IsTUFDeEJwRCxFQUFNK0UsRUFBUTNCLFdBQWdCLElBQUU5SSxPQUVwQyxNQUFNMkssRUFBYUYsRUFBUTNCLFdBQVcsZUFFdEMsR0FEQTFELFFBQVFDLElBQUksY0FBZXNGLEdBQ3ZCQSxFQUFZLENBQ1osTUFBTUMsRUFBYUQsRUFBVzNLLE1BQU02SyxNQUFNLEtBQzFDekYsUUFBUUMsSUFBSSxjQUFldUYsR0FDM0IsSUFBSyxJQUFJRSxLQUFPRixFQUFZLENBQ3hCLE1BQU1HLEVBQU1ELEVBQUlELE1BQU0sS0FBSyxJQUNxQixJQUE1Q3JGLEVBQVN3RixXQUFVMUksR0FBS0EsRUFBRW9ELE1BQVFxRixLQUNsQ3ZGLEVBQVM2QyxLQUFLLENBQUUzQyxJQUFLcUYsRUFBS0UsWUFBYSxvQkFLbkQsTUFBTUMsRUFBU1QsRUFBUTNCLFdBQW1CLE9BQzFDLEdBQUlvQyxFQUFRLENBQ1IsTUFBTU4sRUFBYU0sRUFBT2xMLE1BQU02SyxNQUFNLEtBQ3RDLElBQUssSUFBSUMsS0FBT0YsRUFBWSxDQUN4QixNQUFNRyxFQUFNRCxFQUFJRCxNQUFNLEtBQUssSUFDcUIsSUFBNUNyRixFQUFTd0YsV0FBVTFJLEdBQUtBLEVBQUVvRCxNQUFRcUYsS0FDbEN2RixFQUFTNkMsS0FBSyxDQUFFM0MsSUFBS3FGLEVBQUtFLFlBQWEscUJBTUgsSUFBNUN6RixFQUFTd0YsV0FBVTFJLEdBQUtBLEVBQUVvRCxNQUFRQSxLQUNsQ0YsRUFBUzZDLEtBQUssQ0FBRTNDLElBQUtBLEVBQUt1RixZQUFhUCxHQUFjLG1CQUU3RCxNQUFPN0ksR0FDSHVELFFBQVF3QixNQUFNLG9DQUkxQixNQUFPL0UsR0FDSHVELFFBQVF3QixNQUFNLDBCQUEyQi9FLEdBRTdDLE9BQU8yRCxJLFlDN0NYMUYsT0FBT0MsZUFBZU4sRUFBUyxhQUFjLENBQUVPLE9BQU8sSUFDdERQLEVBQVEwTCxlQUFZLEVBRXBCLE1BQU1DLEVBQVUsQ0FBQyxNQUFPLE9BQVEsS0FBTSxJQUFLLEtBQU0sT0FBUSxRQUFTLE1BQU8sVUFBVyxNQUFPLE1BQU8sTUFBTyxpQkFBa0IsTUFBTyxZQUFhLElBQUssTUFBTyxTQUFVLE1BQU8sd0JBQXlCLE1BQU8saUJBQWtCLE1BQU8sZ0JBQWlCLE1BQU8sZ0JBQWlCLElBQUssTUFBTyxvQkFBcUIsTUFBTyxzQkFBdUIsSUFBSyxNQUFPLGtCQUFtQixNQUFPLGlCQUFrQixNQUFPLE9BQVEsTUFBTyxrQkFBbUIsTUFBTyxvQkFBcUIsS0FBTSxNQUFPLGdCQUFpQixRQUFTLE1BQU8sa0JBQW1CLE1BQU8sbUJBQW9CLE1BQU8sV0FBWSxNQUFPLGVBQWdCLEdBQUksTUFBTyxZQUFhLEtBQU0sTUFBTyxRQUFTLE1BQU8sSUFBSyxtQkFBb0IsS0FBTSxNQUFPLE9BQVEsTUFBTyxrQkFBbUIsS0FBTSxNQUFPLGlCQUFrQixPQUFRLE1BQU8sZ0JBQWlCLE1BQU8sZ0JBQWlCLEtBQU0sTUFBTyxnQkFBaUIsTUFBTyxvQkFBcUIsTUFBTyxPQUFRLElBQUssTUFBTyxpQkFBa0IsTUFBTyxrQkFBbUIsTUFBTyx3QkFBeUIsTUFBTyxvQkFBcUIsTUFBTyxlQUFnQixNQUFPLGdCQUFpQixJQUFLLE1BQU8saUJBQWtCLE1BQU8sdUJBQXdCLE1BQU8sZUFBZ0IsTUFBTyxrQkFBbUIsTUFBTyxxQkFBc0IsTUFBTyxvQkFBcUIsSUFBSyxNQUFPLE9BQVEsS0FBTSxNQUFPLG1CQUFvQixNQUFPLGFBQWMsSUFBSyxNQUFPLGdDQUFpQyxJQUFLLE1BQU8sZUFBZ0IsS0FBTSxNQUFPLGVBQWdCLEtBQU0sTUFBTyxpQkFBa0IsTUFBTyxpQkFBa0IsUUFBUyxNQUFPLGlCQUFrQixJQUFLLE1BQU8sb0JBQXFCLE1BQU8sUUFBUyxNQUFPLGlCQUFrQixNQUFPLHlCQUEwQixJQUFLLE1BQU8sY0FBZSxNQUFPLFlBQWEsTUFBTyxTQUFVLE1BQU8sT0FBUSxNQUFPLGFBQWMsSUFBSyxNQUFPLGtCQUFtQixJQUFLLE1BQU8sVUFBVyxJQUFLLE1BQU8saUJBQWtCLElBQUssTUFBTyxlQUFnQixNQUFPLGdCQUFpQixNQUFPLFNBQVUsTUFBTyxVQUFXLElBQUssTUFBTyxtQkFBb0IsTUFBTyxTQUFVLEtBQU0sTUFBTyxnQkFBaUIsS0FBTSxNQUFPLFNBQVUsS0FBTSxNQUFPLDhCQUErQixNQUFPLGVBQWdCLElBQUssTUFBTyxjQUFlLE1BQU8scUJBQXNCLElBQUssTUFBTyxrQkFBbUIsT0FBUSxNQUFPLE1BQU8sSUFBSyxNQUFPLGtCQUFtQixNQUFPLFFBQVMsS0FBTSxNQUFPLGtCQUFtQixNQUFPLG1CQUFvQixJQUFLLE1BQU8sTUFBTyxJQUFLLE1BQU8sZ0JBQWlCLE1BQU8sTUFBTyxLQUFNLE1BQU8sTUFBTyxJQUFLLE1BQU8saUJBQWtCLElBQUssTUFBTyxPQUFRLE1BQU8sT0FBUSxJQUFLLE1BQU8sa0JBQW1CLE1BQU8sZUFBZ0IsTUFBTyxjQUFlLE1BQU8sU0FBVSxNQUFPLGtCQUFtQixNQUFPLFNBQVUsTUFBTyxvQkFBcUIsS0FBTSxNQUFPLFVBQVcsTUFBTyxVQUFXLE1BQU8sa0JBQW1CLElBQUssTUFBTyxzQkFBdUIsTUFBTyxlQUFnQixNQUFPLG9DQUFxQyxNQUFPLGVBQWdCLE1BQU8sU0FBVSxJQUFLLE1BQU8sa0JBQW1CLE1BQU8scUJBQXNCLEtBQU0sTUFBTyxPQUFRLE1BQU8saUJBQWtCLE1BQU8saUJBQWtCLElBQUssTUFBTyxjQUFlLE9BQVEsTUFBTyxRQUFTLElBQUssTUFBTyxhQUFjLElBQUssTUFBTyxpQkFBa0IsSUFBSyxNQUFPLFNBQVUsTUFBTyxNQUFPLE9BQVEsTUFBTyxVQUFXLEtBQU0sTUFBTyxZQUFhLE1BQU8sa0JBQW1CLElBQUssTUFBTyxRQUFTLEtBQU0sTUFBTyxjQUFlLElBQUssTUFBTyxRQUFTLE1BQU8sTUFBTyxlQUFnQixNQUFPLE1BQU8sZ0JBQWlCLElBQUssTUFBTyxlQUFnQixNQUFPLHFCQUFzQixJQUFLLE1BQU8sT0FBUSxNQUFPLFFBQVMsTUFBTyxjQUFlLElBQUssTUFBTyxnQkFBaUIsT0FBUSxNQUFPLG1CQUFvQixJQUFLLE1BQU8sUUFBUyxNQUFPLG1CQUFvQixNQUFPLFFBQVMsTUFBTyx5QkFBMEIsTUFBTyxrQkFBbUIsTUFBTyx1QkFBd0IsTUFBTyxrQkFBbUIsSUFBSyxNQUFPLGlCQUFrQixNQUFPLGlCQUFrQixNQUFPLFlBQWEsTUFBTyxnQkFBaUIsS0FBTSxNQUFPLFdBQVksTUFBTyxZQUFhLE1BQU8sZUFBZ0IsSUFBSyxNQUFPLG9CQUFxQixRQUFTLE1BQU8sU0FBVSxNQUFPLHFCQUFzQixNQUFPLE9BQVEsSUFBSyxNQUFPLFVBQVcsTUFBTyw2QkFBOEIsUUFBUyxNQUFPLGlCQUFrQixNQUFPLGVBQWdCLEdBQUksTUFBTyx5QkFBMEIsTUFBTyxrQkFBbUIsTUFBTyxVQUFXLElBQUssTUFBTyxhQUFjLE1BQU8sdUJBQXdCLE1BQU8sZ0RBQWlELE1BQU8sZ0JBQWlCLEtBQU0sTUFBTyxpQkFBa0IsS0FBTSxNQUFPLE9BQVEsTUFBTyxVQUFXLEtBQU0sTUFBTyxPQUFRLElBQUssTUFBTyxjQUFlLElBQUssTUFBTyxpQkFBa0IsTUFBTyxtQkFDdHdJM0wsRUFBUW9ELFFBQVc0RixJQUNmQSxFQUFNQSxFQUFJc0IsUUFBUSxNQUFPLEtBQUtBLFFBQVEsVUFBVyxJQUFJQSxRQUFRLFVBQVcsSUFDeEUsSUFBSXNCLEVBQVksR0FFWmxCLEdBQVEsRUFDWixJQUFLLE1BQU1tQixLQUFVRixFQUNqQixJQUFLakIsR0FBU21CLEdBQXFCLEtBQVhBLEVBRXBCLElBQ0ksTUFBTUMsRUFBWSxJQUFJdEIsT0FBTyxVQUFVcUIsVUFBZ0IsS0FDdkQsR0FBSTdDLEVBQUkwQixNQUFNb0IsR0FDVnBCLEdBQVEsRUFDUmtCLEVBQVlBLEVBQVUzRSxPQUFPK0IsRUFBSTBCLE1BQU1vQixRQUV0QyxDQUNELE1BQU1DLEVBQVcsSUFBSXZCLE9BQU8sS0FBS3FCLDBCQUFnQyxLQUM3RDdDLEVBQUkwQixNQUFNcUIsS0FDVnJCLEdBQVEsRUFDUmtCLEVBQVlBLEVBQVUzRSxPQUFPK0IsRUFBSTBCLE1BQU1xQixJQUFhLEtBRXhELE1BQU1DLEVBQVMsSUFBSXhCLE9BQU8sMkJBQTJCcUIsSUFBVSxLQUMzRDdDLEVBQUkwQixNQUFNc0IsS0FBWXRCLElBQ3RCQSxHQUFRLEVBQ1JrQixFQUFZQSxFQUFVM0UsT0FBTytCLEVBQUkwQixNQUFNc0IsSUFBVyxNQUk5RCxNQUFPNUosR0FDSHVELFFBQVF3QixNQUFNL0UsR0FJMUIsTUFBTTZKLEVBQVksR0FDbEIsSUFBSyxNQUFNQyxLQUFTTixFQUFXLENBRTNCLE1BQU1PLEVBQVlELEVBQU14QixNQUFNLGdCQUM5QixJQUFJMEIsRUFBVUMsU0FBU0gsRUFBTTVCLFFBQVEsU0FBVSxLQUUvQyxNQUFNdUIsRUFBU0ssRUFBTTVCLFFBQVEsWUFBYSxJQUNyQzZCLElBQ0RDLEdBQW9CLEtBQ3BCUCxHQUNBSSxFQUFVckQsS0FBSyxDQUFFc0QsTUFBT0UsRUFBU1AsT0FBUTdMLEVBQVEwTCxVQUFVRyxLQUVuRSxPQUFPSSxFQUNGSyxRQUFPLENBQUN6SixFQUFHMEIsSUFBTTBILEVBQVVWLFdBQVV0SCxHQUFLQSxFQUFFaUksUUFBVXJKLEVBQUVxSixPQUFTakksRUFBRTRILFNBQVdoSixFQUFFZ0osV0FBWXRILElBQzVGMkYsTUFBSyxDQUFDQyxFQUFHMUksSUFBTTBJLEVBQUUrQixNQUFRekssRUFBRXlLLFNBRXBDbE0sRUFBUTBMLFVBQWFHLElBQ2pCLElBQUtBLEVBQ0QsTUFBTyxNQUdYLElBQUk5RixFQURKOEYsRUFBU0EsRUFBT3ZCLFFBQVEsTUFBTyxJQUUvQixHQUFJakssT0FBT2tKLEtBQUtnRCxHQUFVN0MsU0FBU21DLEdBQy9CLE9BQU9BLEVBQ1gsSUFBSyxNQUFNVyxLQUFPbk0sT0FBT2tKLEtBQUtnRCxHQUMxQixHQUFJQSxFQUFTQyxHQUFLaEQsUUFBUXFDLEdBQ3RCLE9BQU9XLEVBRWYsT0FBT3pHLEdBRVgsTUFBTXdHLEVBQVcsQ0FDYixJQUFPLENBQUMsTUFBTyxPQUFRLFFBQVMsS0FDaEMsSUFBTyxDQUFDLE1BQU8sWUFBYSxLQUM1QixJQUFPLENBQUMsTUFBTyxVQUFXLEtBQzFCLElBQU8sQ0FBQyxNQUFPLE9BQ2YsSUFBTyxDQUFDLE1BQU8sa0JBQ2YsSUFBTyxDQUFDLE1BQU8sVUFDZixJQUFPLENBQUMsTUFBTyx3QkFBeUIsS0FDeEMsSUFBTyxDQUFDLE1BQU8saUJBQWtCLEtBQ2pDLElBQU8sQ0FBQyxNQUFPLGlCQUNmLElBQU8sQ0FBQyxNQUFPLGdCQUFpQixLQUNoQyxJQUFPLENBQUMsTUFBTyxvQkFBcUIsS0FDcEMsSUFBTyxDQUFDLE1BQU8sc0JBQXVCLEtBQ3RDLElBQU8sQ0FBQyxNQUFPLGtCQUFtQixLQUNsQyxJQUFPLENBQUMsTUFBTyxrQkFDZixJQUFPLENBQUMsTUFBTyxRQUNmLElBQU8sQ0FBQyxNQUFPLGtCQUFtQixLQUNsQyxJQUFPLENBQUMsTUFBTyxvQkFBcUIsTUFDcEMsSUFBTyxDQUFDLE1BQU8sZ0JBQWlCLE9BQ2hDLElBQU8sQ0FBQyxNQUFPLG1CQUNmLElBQU8sQ0FBQyxNQUFPLG1CQUFvQixLQUNuQyxJQUFPLENBQUMsTUFBTyxZQUNmLElBQU8sQ0FBQyxNQUFPLGVBQWdCLElBQy9CLElBQU8sQ0FBQyxNQUFPLFlBQWEsTUFDNUIsSUFBTyxDQUFDLE1BQU8sU0FDZixJQUFPLENBQUMsTUFBTyxtQkFBb0IsTUFDbkMsSUFBTyxDQUFDLE1BQU8sT0FBUSxLQUN2QixJQUFPLENBQUMsTUFBTyxrQkFBbUIsTUFDbEMsSUFBTyxDQUFDLE1BQU8saUJBQWtCLE1BQ2pDLElBQU8sQ0FBQyxNQUFPLGdCQUFpQixLQUNoQyxJQUFPLENBQUMsTUFBTyxnQkFBaUIsTUFDaEMsSUFBTyxDQUFDLE1BQU8saUJBQ2YsSUFBTyxDQUFDLE1BQU8scUJBQ2YsSUFBTyxDQUFDLE1BQU8sT0FBUSxLQUN2QixJQUFPLENBQUMsTUFBTyxrQkFDZixJQUFPLENBQUMsTUFBTyxrQkFBbUIsS0FDbEMsSUFBTyxDQUFDLE1BQU8sd0JBQXlCLEtBQ3hDLElBQU8sQ0FBQyxNQUFPLHFCQUNmLElBQU8sQ0FBQyxNQUFPLGVBQWdCLEtBQy9CLElBQU8sQ0FBQyxNQUFPLGdCQUFpQixLQUNoQyxJQUFPLENBQUMsTUFBTyxpQkFBa0IsS0FDakMsSUFBTyxDQUFDLE1BQU8sd0JBQ2YsSUFBTyxDQUFDLE1BQU8sZ0JBQ2YsSUFBTyxDQUFDLE1BQU8sbUJBQ2YsSUFBTyxDQUFDLE1BQU8scUJBQXNCLEtBQ3JDLElBQU8sQ0FBQyxNQUFPLG9CQUFxQixLQUNwQyxJQUFPLENBQUMsTUFBTyxPQUFRLE1BQ3ZCLElBQU8sQ0FBQyxNQUFPLG9CQUNmLElBQU8sQ0FBQyxNQUFPLGFBQWMsS0FDN0IsSUFBTyxDQUFDLE1BQU8sZ0NBQWlDLEtBQ2hELElBQU8sQ0FBQyxNQUFPLGVBQWdCLE1BQy9CLElBQU8sQ0FBQyxNQUFPLGVBQWdCLE1BQy9CLElBQU8sQ0FBQyxNQUFPLGtCQUNmLElBQU8sQ0FBQyxNQUFPLGlCQUFrQixPQUNqQyxJQUFPLENBQUMsTUFBTyxpQkFBa0IsS0FDakMsSUFBTyxDQUFDLE1BQU8sb0JBQXFCLEtBQ3BDLElBQU8sQ0FBQyxNQUFPLFNBQ2YsSUFBTyxDQUFDLE1BQU8sa0JBQ2YsSUFBTyxDQUFDLE1BQU8seUJBQTBCLEtBQ3pDLElBQU8sQ0FBQyxNQUFPLGNBQWUsS0FDOUIsSUFBTyxDQUFDLE1BQU8sYUFDZixJQUFPLENBQUMsTUFBTyxVQUNmLElBQU8sQ0FBQyxNQUFPLFFBQ2YsSUFBTyxDQUFDLE1BQU8sYUFBYyxLQUM3QixJQUFPLENBQUMsTUFBTyxrQkFBbUIsS0FDbEMsSUFBTyxDQUFDLE1BQU8sVUFBVyxLQUMxQixJQUFPLENBQUMsTUFBTyxpQkFBa0IsS0FDakMsSUFBTyxDQUFDLE1BQU8sZ0JBQ2YsSUFBTyxDQUFDLE1BQU8sZ0JBQWlCLEtBQ2hDLElBQU8sQ0FBQyxNQUFPLFVBQ2YsSUFBTyxDQUFDLE1BQU8sVUFBVyxLQUMxQixJQUFPLENBQUMsTUFBTyxtQkFBb0IsS0FDbkMsSUFBTyxDQUFDLE1BQU8sU0FBVSxNQUN6QixJQUFPLENBQUMsTUFBTyxnQkFBaUIsTUFDaEMsSUFBTyxDQUFDLE1BQU8sU0FBVSxNQUN6QixJQUFPLENBQUMsTUFBTywrQkFDZixJQUFPLENBQUMsTUFBTyxlQUFnQixLQUMvQixJQUFPLENBQUMsTUFBTyxlQUNmLElBQU8sQ0FBQyxNQUFPLHFCQUFzQixLQUNyQyxJQUFPLENBQUMsTUFBTyxrQkFBbUIsTUFDbEMsSUFBTyxDQUFDLE1BQU8sTUFBTyxLQUN0QixJQUFPLENBQUMsTUFBTyxtQkFDZixJQUFPLENBQUMsTUFBTyxRQUFTLE1BQ3hCLElBQU8sQ0FBQyxNQUFPLG1CQUNmLElBQU8sQ0FBQyxNQUFPLG1CQUFvQixLQUNuQyxJQUFPLENBQUMsTUFBTyxNQUFPLEtBQ3RCLElBQU8sQ0FBQyxNQUFPLGlCQUNmLElBQU8sQ0FBQyxNQUFPLE1BQU8sTUFDdEIsSUFBTyxDQUFDLE1BQU8sTUFBTyxLQUN0QixJQUFPLENBQUMsTUFBTyxpQkFBa0IsS0FDakMsSUFBTyxDQUFDLE1BQU8sUUFDZixJQUFPLENBQUMsTUFBTyxPQUFRLEtBQ3ZCLElBQU8sQ0FBQyxNQUFPLGtCQUFtQixLQUNsQyxJQUFPLENBQUMsTUFBTyxnQkFDZixJQUFPLENBQUMsTUFBTyxlQUNmLElBQU8sQ0FBQyxNQUFPLFVBQ2YsSUFBTyxDQUFDLE1BQU8sbUJBQ2YsSUFBTyxDQUFDLE1BQU8sVUFDZixJQUFPLENBQUMsTUFBTyxvQkFBcUIsTUFDcEMsSUFBTyxDQUFDLE1BQU8sV0FDZixJQUFPLENBQUMsTUFBTyxXQUNmLElBQU8sQ0FBQyxNQUFPLGtCQUFtQixLQUNsQyxJQUFPLENBQUMsTUFBTyx1QkFDZixJQUFPLENBQUMsTUFBTyxlQUFnQixLQUMvQixJQUFPLENBQUMsTUFBTyxxQ0FDZixJQUFPLENBQUMsTUFBTyxnQkFDZixJQUFPLENBQUMsTUFBTyxTQUFVLEtBQ3pCLElBQU8sQ0FBQyxNQUFPLG1CQUNmLElBQU8sQ0FBQyxNQUFPLHFCQUFzQixNQUNyQyxJQUFPLENBQUMsTUFBTyxRQUNmLElBQU8sQ0FBQyxNQUFPLGlCQUFrQixLQUNqQyxJQUFPLENBQUMsTUFBTyxpQkFBa0IsS0FDakMsSUFBTyxDQUFDLE1BQU8sY0FBZSxNQUM5QixJQUFPLENBQUMsTUFBTyxRQUFTLEtBQ3hCLElBQU8sQ0FBQyxNQUFPLGFBQWMsS0FDN0IsSUFBTyxDQUFDLE1BQU8saUJBQWtCLEtBQ2pDLElBQU8sQ0FBQyxNQUFPLFNBQVUsT0FDekIsSUFBTyxDQUFDLE1BQU8sUUFDZixJQUFPLENBQUMsTUFBTyxVQUFXLE1BQzFCLElBQU8sQ0FBQyxNQUFPLFlBQWEsT0FDNUIsSUFBTyxDQUFDLE1BQU8sa0JBQW1CLEtBQ2xDLElBQU8sQ0FBQyxNQUFPLFFBQVMsTUFDeEIsSUFBTyxDQUFDLE1BQU8sY0FBZSxLQUM5QixJQUFPLENBQUMsTUFBTyxRQUFTLE9BQ3hCLElBQU8sQ0FBQyxNQUFPLGVBQWdCLE9BQy9CLElBQU8sQ0FBQyxNQUFPLGdCQUFpQixLQUNoQyxJQUFPLENBQUMsTUFBTyxnQkFDZixJQUFPLENBQUMsTUFBTyxxQkFBc0IsS0FDckMsSUFBTyxDQUFDLE1BQU8sUUFDZixJQUFPLENBQUMsTUFBTyxTQUNmLElBQU8sQ0FBQyxNQUFPLGNBQWUsS0FDOUIsSUFBTyxDQUFDLE1BQU8sZ0JBQWlCLFFBQ2hDLElBQU8sQ0FBQyxNQUFPLG1CQUFvQixLQUNuQyxJQUFPLENBQUMsTUFBTyxTQUNmLElBQU8sQ0FBQyxNQUFPLG1CQUFvQixLQUNuQyxJQUFPLENBQUMsTUFBTyxTQUNmLElBQU8sQ0FBQyxNQUFPLHlCQUEwQixLQUN6QyxJQUFPLENBQUMsTUFBTyxrQkFBbUIsS0FDbEMsSUFBTyxDQUFDLE1BQU8sd0JBQ2YsSUFBTyxDQUFDLE1BQU8sa0JBQW1CLEtBQ2xDLElBQU8sQ0FBQyxNQUFPLGtCQUNmLElBQU8sQ0FBQyxNQUFPLGlCQUFrQixLQUNqQyxJQUFPLENBQUMsTUFBTyxhQUNmLElBQU8sQ0FBQyxNQUFPLGdCQUFpQixNQUNoQyxJQUFPLENBQUMsTUFBTyxZQUNmLElBQU8sQ0FBQyxNQUFPLGFBQ2YsSUFBTyxDQUFDLE1BQU8sZUFBZ0IsS0FDL0IsSUFBTyxDQUFDLE1BQU8sb0JBQXFCLE9BQ3BDLElBQU8sQ0FBQyxNQUFPLFVBQ2YsSUFBTyxDQUFDLE1BQU8sc0JBQ2YsSUFBTyxDQUFDLE1BQU8sT0FBUSxLQUN2QixJQUFPLENBQUMsTUFBTyxXQUNmLElBQU8sQ0FBQyxNQUFPLDZCQUE4QixPQUM3QyxJQUFPLENBQUMsTUFBTyxrQkFDZixJQUFPLENBQUMsTUFBTyxlQUFnQixJQUMvQixJQUFPLENBQUMsTUFBTywwQkFDZixJQUFPLENBQUMsTUFBTyxtQkFDZixJQUFPLENBQUMsTUFBTyxVQUFXLEtBQzFCLElBQU8sQ0FBQyxNQUFPLGNBQ2YsSUFBTyxDQUFDLE1BQU8sd0JBQ2YsSUFBTyxDQUFDLE1BQU8saURBQ2YsSUFBTyxDQUFDLE1BQU8sZ0JBQWlCLE1BQ2hDLElBQU8sQ0FBQyxNQUFPLGlCQUFrQixNQUNqQyxJQUFPLENBQUMsTUFBTyxRQUNmLElBQU8sQ0FBQyxNQUFPLFVBQVcsTUFDMUIsSUFBTyxDQUFDLE1BQU8sT0FBUSxLQUN2QixJQUFPLENBQUMsTUFBTyxjQUFlLEtBQzlCLElBQU8sQ0FBQyxNQUFPLGtCQUNmLElBQU8sQ0FBQyxNQUFPLHFCLFlDMU9uQmxNLE9BQU9DLGVBQWVOLEVBQVMsYUFBYyxDQUFFTyxPQUFPLElBQ3REUCxFQUFRb0QsUUFBV1MsR0FDUkEsRUFBTzRJLFVBQVVuQyxRQUFRLE1BQU8sTSxvQkNGM0MsSUFBSWpJLEVBQWFGLE1BQVFBLEtBQUtFLFdBQWMsU0FBVUMsRUFBU0MsRUFBWUMsRUFBR0MsR0FFMUUsT0FBTyxJQUFLRCxJQUFNQSxFQUFJekIsV0FBVSxTQUFVQyxFQUFTQyxHQUMvQyxTQUFTeUIsRUFBVW5DLEdBQVMsSUFBTW9DLEVBQUtGLEVBQVVHLEtBQUtyQyxJQUFXLE1BQU9zQyxHQUFLNUIsRUFBTzRCLElBQ3BGLFNBQVNDLEVBQVN2QyxHQUFTLElBQU1vQyxFQUFLRixFQUFpQixNQUFFbEMsSUFBVyxNQUFPc0MsR0FBSzVCLEVBQU80QixJQUN2RixTQUFTRixFQUFLSSxHQUpsQixJQUFleEMsRUFJYXdDLEVBQU9DLEtBQU9oQyxFQUFRK0IsRUFBT3hDLFFBSjFDQSxFQUl5RHdDLEVBQU94QyxNQUpoREEsYUFBaUJpQyxFQUFJakMsRUFBUSxJQUFJaUMsR0FBRSxTQUFVeEIsR0FBV0EsRUFBUVQsT0FJVDBDLEtBQUtQLEVBQVdJLEdBQ2xHSCxHQUFNRixFQUFZQSxFQUFVUyxNQUFNWixFQUFTQyxHQUFjLEtBQUtLLFlBR3RFdkMsT0FBT0MsZUFBZU4sRUFBUyxhQUFjLENBQUVPLE9BQU8sSUFDdEQsTUFBTW1NLEVBQWdCLEVBQVEsS0FDeEJ4RCxFQUFlLEVBQVEsS0FDdkJ5RCxFQUFrQixFQUFRLEtBQzFCQyxFQUFjLEVBQVEsS0FDdEJDLEVBQWEsRUFBUSxLQUNyQkMsRUFBVyxFQUFRLEtBQ25CQyxFQUFXLEVBQVEsS0FDbkJDLEVBQWlCLEVBQVEsS0FDekJDLEVBQVcsRUFBUSxLQUN6QmpOLEVBQVFvRCxRQUFXUyxHQUFXeEIsT0FBVSxPQUFRLE9BQVEsR0FBUSxZQUM1RCxJQUNJLE1BQU0wRCxFQUFXLEdBQ2pCLElBQUlnRixRQUFlaUMsRUFBZTVKLFFBQVFTLEdBQzFDa0MsRUFBU21ILFNBQVduQyxFQUNwQmhGLEVBQVNvSCxNQUFRcEMsRUFBTyxHQUFLQSxFQUFPLEdBQUssR0FDekNoRixFQUFTeUYsWUFBY3lCLEVBQVM3SixRQUFRUyxHQUN4Q2tDLEVBQVNxSCxPQUFTVixFQUFjdEosUUFBUTJDLEVBQVN5RixhQUNqRHpGLEVBQVNtRyxNQUFRbkcsRUFBU3FILE9BQU8sR0FBS3JILEVBQVNxSCxPQUFPLEdBQUssR0FDM0RySCxFQUFTc0gsT0FBU04sRUFBUzNKLFFBQVEyQyxFQUFTeUYsYUFDNUN6RixFQUFTdUgsS0FBT3ZDLEVBQU8sSUFBTUEsRUFBTyxHQUFHdUMsS0FBT3ZDLEVBQU8sR0FBR3VDLEtBQU8sR0FDL0R2SCxFQUFTd0gsbUJBQXFCckUsRUFBYTlGLFFBQVFTLEdBQ25Ea0MsRUFBU3FELElBQU11RCxFQUFnQnZKLFFBQVFTLEVBQVEsT0FDL0NrQyxFQUFTRSxJQUFNNkcsRUFBUzFKLFFBQVFTLEdBQ2hDa0MsRUFBU3lILFVBQVliLEVBQWdCdkosUUFBUVMsRUFBUSxNQUNyRCxNQUFNNEosRUFBUWIsRUFBWXhKLFFBQVFTLEdBR2xDLE9BRkFrQyxFQUFTd0gsbUJBQXFCbE4sT0FBT3FOLE9BQU8zSCxFQUFTd0gsbUJBQW9CRSxHQUN6RTFILEVBQVM0SCxTQUFXZCxFQUFXekosUUFBUVMsR0FDaENrQyxFQUVYLE1BQU8zRCxHQUVILE9BREF1RCxRQUFRd0IsTUFBTSxjQUFlL0UsR0FDdEIsU0M5Q1h3TCxFQUEyQixHLE9BRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVU5TixRQUczQyxJQUFJQyxFQUFTMk4sRUFBeUJFLEdBQVksQ0FHakQ5TixRQUFTLElBT1YsT0FIQStOLEVBQW9CRCxHQUFVckosS0FBS3hFLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVM2TixHQUdwRTVOLEVBQU9ELFFDakJXNk4sQ0FBb0IsSSIsImZpbGUiOiJleGVjdXRlUGF0aFNldHVwVjMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wicGF0aFNjcmlwdFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJwYXRoU2NyaXB0XCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEVsZW1lbnQgc2Nyb2xsIHRvIHBvc1gsIHBvc1kgaW4gZGVsYXkgdGhlbiBzZW5kIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBzY3JvbGwgIC8vIHRoZSBlbGVtZW50IHRvIHNjcm9sbFxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5ICAvLyB0aW1lbGFwIHRvIHNjcm9sbCBldmVudFxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1kgIC8vIHRoZSB0YXJnZXQgc2Nyb2xsWSBpbiBwaXhlbFxuICogQHBhcmFtIHtudW1iZXJ9IHBvc1ggIC8vIHRoZSB0YXJnZXQgc2Nyb2xsWCBpbiBwaXhlbFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGxldGUgIC8vIGZ1bmN0aW9uIGNhbGxlZCB3aGlsZSBzY3JvbGwgZGVsYXkgaXMgY29tcGxldGVcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbmltYXRlU2Nyb2xsID0gdm9pZCAwO1xuZXhwb3J0cy5hbmltYXRlU2Nyb2xsID0gKGRlbGF5LCBzdGFydFksIHN0YXJ0WCwgcG9zWSwgcG9zWCwgY29tcGxldGUpID0+IHtcbiAgICAvKiBjb25zdCBzdGFydFggPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICBjb25zdCBzdGFydFkgPSB3aW5kb3cuc2Nyb2xsWDsgKi9cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlWCA9IHBvc1ggLSBzdGFydFg7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VZID0gcG9zWSAtIHN0YXJ0WTtcbiAgICAgICAgICAgIGxldCBjdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICBjb25zdCBpbmNyZW1lbnQgPSAyMDtcbiAgICAgICAgICAgIE1hdGguZWFzZUluT3V0UXVhZCA9IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICAgICAgICAgICAgdCAvPSBkIC8gMjtcbiAgICAgICAgICAgICAgICBpZiAodCA8IDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYyAvIDIpICogdCAqIHQgKyBiO1xuICAgICAgICAgICAgICAgIHQtLTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKC1jIC8gMikgKiAodCAqICh0IC0gMikgLSAxKSArIGI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGltZSArPSBpbmNyZW1lbnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsWSA9IE1hdGguZWFzZUluT3V0UXVhZChjdXJyZW50VGltZSwgc3RhcnRZLCBjaGFuZ2VZLCBkZWxheSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsWCA9IE1hdGguZWFzZUluT3V0UXVhZChjdXJyZW50VGltZSwgc3RhcnRYLCBjaGFuZ2VYLCBkZWxheSk7XG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbCh2YWxYLCB2YWxZKTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFRpbWUgPCBkZWxheSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGFuaW1hdGVTY3JvbGwsIGluY3JlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSh7IG1lc3NhZ2U6ICdjb21wbGV0ZScgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiAnY29tcGxldGUnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICAgICAgICAgIGFuaW1hdGVTY3JvbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBzY3JvbGwgLy8gdGhlIGVsZW1lbnQgdG8gc2Nyb2xsIC0gYm9keSBieSBkZWZhdWx0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAvLyBjYWxsZWQgZnVuY3Rpb24gd2hpbGUgc2Nyb2xsZXZlbnQgdGFzayBpcyBjb21vcGxldGVcbiAqL1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhbmltYXRlU2Nyb2xsXzEgPSByZXF1aXJlKFwiLi9hbmltYXRlU2Nyb2xsXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKGRlbGF5ID0gMTAwKSA9PiB7XG4gICAgaWYgKHNjcm9sbClcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgc2Nyb2xsRW5kID0gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZmluaXNoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdhaXRpbmcgcGFnZSBsb2FkIHRoZW4gY2hlY2sgcGFnZS5zY3JvbGxIZWlnaHQgaGFzIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsRW5kID09PSBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBzdGF0dXM6IFwiY29tcGxldGVcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbEVuZCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVTY3JvbGxfMS5hbmltYXRlU2Nyb2xsKGRlbGF5LCB3aW5kb3cuc2Nyb2xsWSwgd2luZG93LnNjcm9sbFgsIHNjcm9sbEVuZCwgMCwgZmluaXNoZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAxMDAgKyBkZWxheSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhbmltYXRlU2Nyb2xsXzEuYW5pbWF0ZVNjcm9sbChkZWxheSwgd2luZG93LnNjcm9sbFksIHdpbmRvdy5zY3JvbGxYLCBzY3JvbGxFbmQsIDAsIGZpbmlzaGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIHRydWU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFNjcm9sbCB0byB0YXJnZXQgZWxlbWVudCBwb3NpdGlvbiBZXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBzY3JvbGwgLy8gdGhlIGVsZW1lbnQgdG8gc2Nyb2xsXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgLy8gdGhlIHRhcmdldCBlbGVtZW50IHRvIHRvIGdldCBwb3NpdGlvbiBhbmQgc2Nyb2xsIHRvXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAvLyBjYWxsZWQgZnVuY3Rpb24gd2hpbGUgc2Nyb2xsZXZlbnQgdGFzayBpcyBjb21vcGxldGVcbiAqL1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhbmltYXRlU2Nyb2xsXzEgPSByZXF1aXJlKFwiLi9hbmltYXRlU2Nyb2xsXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKHRhcmdldCkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB5aWVsZCBhbmltYXRlU2Nyb2xsXzEuYW5pbWF0ZVNjcm9sbCgxMDAsIHdpbmRvdy5zY3JvbGxZLCB3aW5kb3cuc2Nyb2xsWCwgd2luZG93LnNjcm9sbFkgKyB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueSwgd2luZG93LnNjcm9sbFggKyB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueCwgbnVsbCk7XG4gICAgICAgICAgICBpZiAoZXZlbnQpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShldmVudCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVqZWN0KGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgIH0pKTtcbn07XG4vLyBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHsgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogRXhlY3V0ZSBzZXR1cCBzY3JpcHRcbiAqIGdldCBhbmQgcGFyc2UgZWFjaCBzdGF0aWNcbiAqIGZvciBlYWNoIGxpc3RcbiAqIC0gZm9yIGVhY2ggbGlzdFxuICogLS0gc2Nyb2xsIHRvIGl0ZW0gZWxlbWVudCBzY3JvbGxUb0VsZW1lbnQoKVxuICogLS0tIHBhcnNlIGFuZFxuICogLS0tIGFkZCBlYWNoIGxpc3QgaXRlbSBwYXJzZWQgYXMgY29tcGxlbWVudGFyeVxuICogLS0tIHN0b3JlIGRhdGFzZXQgaW4gcmVzcG9uc2VcbiAqIC0gc3dpdGNoIG5hdmlnYXRpb25cbiAqIC0tIFsxXSBzY3JvbGxUb0JvdHRvbSgpXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fYXN5bmNWYWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNWYWx1ZXMpIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGVsbG9QdXBwZXRlZXIgPSBleHBvcnRzLmdldEl0ZW0gPSBleHBvcnRzLnByb2Nlc3NMaXN0SXRlbSA9IGV4cG9ydHMucHJvY2Vzc1Njcm9sbFRvQm90dG9tID0gZXhwb3J0cy5wcm9jZXNzTG9hZE1vcmVCdXR0b24gPSBleHBvcnRzLmJpZ2VQYXRoID0gdm9pZCAwO1xuY29uc3Qgc2Nyb2xsVG9Cb3R0b21fMSA9IHJlcXVpcmUoXCIuL2V2ZW50cy9zY3JvbGxUb0JvdHRvbVwiKTtcbmNvbnN0IHNjcm9sbFRvRWxlbWVudF8xID0gcmVxdWlyZShcIi4vZXZlbnRzL3Njcm9sbFRvRWxlbWVudFwiKTtcbmNvbnN0IHByb2R1Y3RTY2hlbWVfMSA9IHJlcXVpcmUoXCIuL3BhcnNlcnMvcHJvZHVjdFNjaGVtZVwiKTtcbmV4cG9ydHMuYmlnZVBhdGggPSAoc2V0dXAsIGNhbGxiYWNrKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zb2xlLmxvZygnYmlnZVBhdGgnKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgY29uc29sZS5sb2coJ2luIHByb21pc2UnKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICBzdGF0aWM6IHtcbiAgICAgICAgICAgICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGlzdDogW10sXG4gICAgICAgICAgICBtZXNzYWdlOiBcImhlbGxvXCJcbiAgICAgICAgfTtcbiAgICAgICAgY29uc29sZS5sb2coJ2xldCB0cnknKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3BvbnNlLm1lc3NhZ2UgPSBcInRyeVwiO1xuICAgICAgICAgICAgaWYgKHNldHVwLnN0YXRpYykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3RhdCBvZiBzZXR1cC5zdGF0aWMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN0YXQuc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5zdGF0aWNbc3RhdC5sYWJlbF0gPSBzdGF0RWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3RhdGljIHBhc3NlZCcpO1xuICAgICAgICAgICAgcmVzcG9uc2UubWVzc2FnZSA9IFwic3RhdGljIHBhc3NlZFwiO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NldHVwLm5hdmlnYXRpb24gJywgc2V0dXAubmF2aWdhdGlvbik7XG4gICAgICAgICAgICBpZiAoc2V0dXAubmF2aWdhdGlvbikge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLm1lc3NhZ2UgPSBcImhhcyBuYXZpZ2F0aW9uIFwiICsgc2V0dXAubmF2aWdhdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoc2V0dXAubmF2aWdhdGlvbi5tb2RlID09PSBcImxvYWRNb3JlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xvYWQgbW9yZSBuYXYgbW9kZScpO1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5tZXNzYWdlID0gXCJ3YWl0aW5nIHBhcnNlciBsb2FkbW9yZVwiO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCBleHBvcnRzLnByb2Nlc3NMb2FkTW9yZUJ1dHRvbihzZXR1cCwgcmVzcG9uc2UubGlzdCwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Byb2Nlc3NlZCAnLCByZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UubGlzdCA9IHJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnd2lsbCByZXNvbHZlJyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzZXR1cC5uYXZpZ2F0aW9uLm1vZGUgPT09IFwic2Nyb2xsVG9Cb3R0b21cIikge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5tZXNzYWdlID0gXCJ3YWl0aW5nIHBhcnNlciBwcm9jZXNzU2Nyb2xsVG9Cb3R0b21cIjtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UubGlzdCA9IHlpZWxkIGV4cG9ydHMucHJvY2Vzc1Njcm9sbFRvQm90dG9tKHNldHVwLCByZXNwb25zZS5saXN0LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzZXR1cC5uYXZpZ2F0aW9uLm1vZGUgPT09IFwibmV4dEJ1dHRvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLm1lc3NhZ2UgPSBcIndhaXRpbmcgcGFyc2VyIHByb2Nlc3NTY3JvbGxUb0JvdHRvbVwiO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX2FzeW5jVmFsdWVzKHNldHVwLmxpc3RzKSwgX2M7IF9jID0geWllbGQgX2IubmV4dCgpLCAhX2MuZG9uZTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0ID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UubGlzdCA9IHJlc3BvbnNlLmxpc3QuY29uY2F0KHJlc3BvbnNlLmxpc3QsIHlpZWxkIGV4cG9ydHMucHJvY2Vzc0xpc3RJdGVtKGxpc3QudGFyZ2V0LnNlbGVjdG9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSB5aWVsZCBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh7IHJlc3BvbnNlOiByZXNwb25zZSB9KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2hhcyBlcnJvcicpO1xuICAgICAgICAgICAgY2FsbGJhY2soeyByZXNwb25zZTogcmVzcG9uc2UsIGVycjogZXJyIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvcjogZXJyLCBtZXNzYWdlOiBcIndyb25nIHBhdGggc2V0dXBcIiB9O1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKHsgcmVzcG9uc2U6IHJlc3BvbnNlIH0pO1xuICAgIH0pKTtcbn0pO1xuZXhwb3J0cy5wcm9jZXNzTG9hZE1vcmVCdXR0b24gPSAoc2V0dXAsIHJlc3BvbnNlLCBjYWxsYmFjaykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdmFyIGVfMiwgX2Q7XG4gICAgY29uc29sZS5sb2coJ3Byb2Nlc3NMb2FkTW9yZUJ1dHRvbiAnLCByZXNwb25zZSwgc2V0dXAubGlzdHMpO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGxldCByZXNwb25zZSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfZSA9IF9fYXN5bmNWYWx1ZXMoc2V0dXAubGlzdHMpLCBfZjsgX2YgPSB5aWVsZCBfZS5uZXh0KCksICFfZi5kb25lOykge1xuICAgICAgICAgICAgY29uc3QgbGlzdCA9IF9mLnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgbmV3cyA9IHlpZWxkIGV4cG9ydHMucHJvY2Vzc0xpc3RJdGVtKGxpc3QudGFyZ2V0LnNlbGVjdG9yKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCduZXdzID8/ICcsIG5ld3MsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVzcG9uc2UuY29uY2F0KG5ld3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoX2YgJiYgIV9mLmRvbmUgJiYgKF9kID0gX2UucmV0dXJuKSkgeWllbGQgX2QuY2FsbChfZSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgIH1cbiAgICBjb25zdCBsb2FkTW9yZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2V0dXAubmF2aWdhdGlvbi5sb2FkTW9yZVNlbGVjdG9yKTtcbiAgICBpZiAoIWxvYWRNb3JlKSB7XG4gICAgICAgIC8vIHByb2Nlc3MgYWxsIHdoZW4gbGlzdCBsb2FkIG1vcmUgaXMga2lja2VkXG4gICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbG9hZE1vcmUuY2xpY2soKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBvcnRzLnByb2Nlc3NMb2FkTW9yZUJ1dHRvbihzZXR1cCwgcmVzcG9uc2UsIGNhbGxiYWNrKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxufSk7XG5leHBvcnRzLnByb2Nlc3NTY3JvbGxUb0JvdHRvbSA9IChzZXR1cCwgcmVzcG9uc2UsIGNhbGxiYWNrKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB2YXIgZV8zLCBfZztcbiAgICB5aWVsZCBzY3JvbGxUb0JvdHRvbV8xLmRlZmF1bHQoMjAwKTtcbiAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaCA9IF9fYXN5bmNWYWx1ZXMoc2V0dXAubGlzdHMpLCBfajsgX2ogPSB5aWVsZCBfaC5uZXh0KCksICFfai5kb25lOykge1xuICAgICAgICAgICAgY29uc3QgbGlzdCA9IF9qLnZhbHVlO1xuICAgICAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZS5jb25jYXQocmVzcG9uc2UsIHlpZWxkIGV4cG9ydHMucHJvY2Vzc0xpc3RJdGVtKGxpc3QudGFyZ2V0LnNlbGVjdG9yKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChfaiAmJiAhX2ouZG9uZSAmJiAoX2cgPSBfaC5yZXR1cm4pKSB5aWVsZCBfZy5jYWxsKF9oKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMykgdGhyb3cgZV8zLmVycm9yOyB9XG4gICAgfVxuICAgIGNhbGxiYWNrKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59KTtcbmV4cG9ydHMucHJvY2Vzc0xpc3RJdGVtID0gKHNlbGVjdG9yKSA9PiB7XG4gICAgbGV0IHJlc3BvbnNlID0gW107XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB2YXIgZV80LCBfYTtcbiAgICAgICAgY29uc3QgbGlzdFRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsaXN0VGFyZ2V0XzEgPSBfX2FzeW5jVmFsdWVzKGxpc3RUYXJnZXQpLCBsaXN0VGFyZ2V0XzFfMTsgbGlzdFRhcmdldF8xXzEgPSB5aWVsZCBsaXN0VGFyZ2V0XzEubmV4dCgpLCAhbGlzdFRhcmdldF8xXzEuZG9uZTspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdFRhciA9IGxpc3RUYXJnZXRfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxpc3RUYXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdwcm9jZXNzZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIGV4cG9ydHMuZ2V0SXRlbShsaXN0VGFyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0VGFyLmNsYXNzTGlzdC5hZGQoJ3Byb2Nlc3NlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfNF8xKSB7IGVfNCA9IHsgZXJyb3I6IGVfNF8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0VGFyZ2V0XzFfMSAmJiAhbGlzdFRhcmdldF8xXzEuZG9uZSAmJiAoX2EgPSBsaXN0VGFyZ2V0XzEucmV0dXJuKSkgeWllbGQgX2EuY2FsbChsaXN0VGFyZ2V0XzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfNCkgdGhyb3cgZV80LmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH0pKTtcbn07XG5leHBvcnRzLmdldEl0ZW0gPSAobGlzdFRhcikgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghbGlzdFRhci5jbGFzc0xpc3QuY29udGFpbnMoJ2JpZ2VQcm9jZXNzZWQnKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIHNjcm9sbFRvRWxlbWVudF8xLmRlZmF1bHQobGlzdFRhcik7XG4gICAgICAgICAgICAgICAgLy8gdG9kbyBzY2hlbW9yZyBzZXR1cCBmcm9tIGl0ZW0gcHVzaCBvbiByZXNwb25zZVxuICAgICAgICAgICAgICAgIC8vIHJlc3BvbnNlLnB1c2gobGlzdFRhcik7XG4gICAgICAgICAgICAgICAgbGlzdFRhci5jbGFzc0xpc3QuYWRkKCdiaWdlUHJvY2Vzc2VkJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NoZW1lID0geWllbGQgcHJvZHVjdFNjaGVtZV8xLmRlZmF1bHQobGlzdFRhcik7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzY2hlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoXCJmYWlsXCIpO1xuICAgICAgICB9XG4gICAgfSkpO1xufTtcbmV4cG9ydHMuaGVsbG9QdXBwZXRlZXIgPSAoc3RyKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICByZXR1cm4gYGhlbGxvICR7c3RyfWA7XG59KTtcbndpbmRvdy5iaWdlUGF0aCA9IGV4cG9ydHMuYmlnZVBhdGg7XG53aW5kb3cuaGVsbG9QdXBwZXRlZXIgPSBleHBvcnRzLmhlbGxvUHVwcGV0ZWVyO1xud2luZG93LnNjcm9sbFRvQm90dG9tID0gc2Nyb2xsVG9Cb3R0b21fMS5kZWZhdWx0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFRyeSB0byByZXRyaWV2ZSBhdHRyaWJ1dGUgbGlrZSB2ZXJib3NlIGZyb20gdGFyZ2V0IGVsZW1lbnQgY29udGVudCB0YWdzIGFuZCBkYXRhc2V0XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJib3NlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IC8vIHN0cmluZyBhcyBza3Ugb3IgZW1wcnkgc3RyaW5nXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IEF0dHJpYnV0ZXNfMSA9IHJlcXVpcmUoXCIuL0F0dHJpYnV0ZXNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSAodGFyZ2V0LCB2ZXJib3NlKSA9PiB7XG4gICAgbGV0IHNrdSA9IFwiXCI7XG4gICAgaWYgKCF0YXJnZXQpXG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBBdHRyaWJ1dGVzXzEuZGVmYXVsdCh0YXJnZXQpO1xuICAgIGZvciAoY29uc3QgYXR0ciBvZiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKSkge1xuICAgICAgICBpZiAoYXR0ci5pbmRleE9mKHZlcmJvc2UpICE9PSAtMSlcbiAgICAgICAgICAgIHNrdSA9IGF0dHJpYnV0ZXNbYXR0cl07XG4gICAgfVxuICAgIHJldHVybiBza3U7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFJldHJpZXZlIGVsZW1lbnQgbGlzdCBvZiBhdHRyaWJ1dGVzIGRhdGEtIGFuZCBvdGhlcnNcbiAqIEBwYXJhbSAge0h0bWxFbGVtZW50fSB0YXJnZXQgLy8gd2ljaCBlbGVtZW50IHlvdSB3YW50IHRvIGFuYWx5c2VcbiAqIEByZXR1cm4ge2FycmF5fSAvLyBhcnJheSBvZiBhdHRyaWJ1dGVzIGZyb20gdmVyYm9zZVxuICoqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXhjbHVkZVRhZ3MgPSBbXG4gICAgXCJjbGFzc1wiLFxuICAgIFwic3R5bGVcIixcbiAgICBcImRhdGEtd2lkdGhzXCIsXG4gICAgXCJkYXRhLXNpemVzXCIsXG4gICAgXCJzaXplc1wiLFxuICAgIFwic3Jjc2V0XCIsXG4gICAgXCJtZXRob2RcIixcbiAgICBcImVuY3R5cGVcIixcbiAgICBcInR5cGVcIixcbiAgICBcImRpc2FibGVkXCIsXG4gICAgXCJ4XCIsXG4gICAgXCJ5XCIsXG4gICAgXCJ3aWR0aFwiLFxuICAgIFwiaGVpZ2h0XCIsXG4gICAgXCJ2aWV3Qm94XCIsXG4gICAgXCJmaWxsXCIsXG4gICAgXCJzdHJva2Utd2lkdGhcIixcbiAgICBcInN0cm9rZS1saW5lY2FwXCIsXG4gICAgXCJzdHJva2UtbWl0ZXJsaW1pdFwiLFxuICAgIFwiZFwiLFxuICAgIFwidmVyc2lvblwiLFxuICAgIFwieG1sbnNcIixcbiAgICBcInhtbG5zOnhsaW5rXCIsXG4gICAgXCJ4bWw6c3BhY2VcIixcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIFwiZGF0YS1zd2FjdGlvblwiLFxuICAgIFwiZGF0YS10ZXN0XCIsXG4gICAgXCJjaGVja2VkXCIsXG4gICAgXCJkYXRhLWltYWdlLXdpZHRoc1wiLFxuICAgIFwiYXJpYS1oaWRkZW5cIixcbl07XG5leHBvcnRzLmRlZmF1bHQgPSAodGFyZ2V0KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGF0dHIgb2YgdGFyZ2V0LmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKCFleGNsdWRlVGFncy5pbmNsdWRlcyhhdHRyLm5hbWUpKVxuICAgICAgICAgICAgcmVzcG9uc2VbYXR0ci5uYW1lXSA9IGF0dHIudmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IGNoaWxkcyA9IHRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKCcqJyk7XG4gICAgZm9yIChjb25zdCBjaGlsZHJlbiBvZiBjaGlsZHMpIHtcbiAgICAgICAgZm9yIChjb25zdCBhdHRyIG9mIGNoaWxkcmVuLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGlmICghZXhjbHVkZVRhZ3MuaW5jbHVkZXMoYXR0ci5uYW1lKSlcbiAgICAgICAgICAgICAgICByZXNwb25zZVthdHRyLm5hbWVdID0gYXR0ci52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFRyeSB0byByZXRyaWV2ZSBhdHRyaWJ1dGUgbGlrZSB2ZXJib3NlIGZyb20gdGFyZ2V0IGVsZW1lbnQgY29udGVudCB0YWdzIGFuZCBkYXRhc2V0XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJib3NlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IC8vIHN0cmluZyBhcyBza3Ugb3IgZW1wcnkgc3RyaW5nXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9ICh0YXJnZXQpID0+IHtcbiAgICBjb25zdCBocmVmcyA9IHRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKCdhJyk7XG4gICAgaWYgKGhyZWZzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgdXJsID0gW107XG4gICAgICAgIGZvciAoY29uc3QgbGluayBvZiBocmVmcykge1xuICAgICAgICAgICAgaWYgKGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJykgJiYgbGluay5nZXRBdHRyaWJ1dGUoJ2hyZWYnKS5pbmRleE9mKCdqYXZhc2NyaXB0JykgPT09IC0xKVxuICAgICAgICAgICAgICAgIHVybC5wdXNoKGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cmwubGVuZ3RoID4gMSlcbiAgICAgICAgICAgIHVybC5zb3J0KChhLCBiKSA9PiBhLmxlbmd0aCAtIGIubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHVybFswXTtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gXCJcIjtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogcmV0cml2ZSBhbnkgbmljZSB2YWx1ZXMgZnJvbSBpdGVtIHByb3BzIGZvciB3ZWJzaXRlcyB0aGF0IGRlZmluZSBtZXRhIG9yIHVzZSBzY2hlbWEub3JnIHByb3Blcmx5XG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gdGFyZ2V0XG4gKiBAcmV0dXJuIHtJdGVtUHJvcH1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gKHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge307XG4gICAgY29uc3QgaXRlbXNQcm9wID0gdGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbaXRlbXByb3BdXCIpO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtc1Byb3ApIHtcbiAgICAgICAgcmVzcG9uc2VbaXRlbS5hdHRyaWJ1dGVzWydpdGVtcHJvcCddLnZhbHVlXSA9IGl0ZW0uYXR0cmlidXRlc1snY29udGVudCddID8gaXRlbS5hdHRyaWJ1dGVzWydjb250ZW50J10udmFsdWUgOiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIHRyeSB0byBnZXQgbWF0ZXJpYWwgaW5mb3JtYXRpb25zIHN1Y2ggYXMgY290b24sIGJpb25pYyBjb3RvbiwgcG9seSBldGNcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSB0YXJnZXRcbiAqIEByZXR1cm5zIHtzdHJyaW5nW119XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9ICh0YXJnZXQpID0+IHtcbiAgICAvLyBjb25zb2xlLmluZm8oJ21hdGVyaWFsIGlzIHVuZGVyIGRldmVsb3BtZW50IHRhcmdldCAnLCB0YXJnZXQpO1xuICAgIHJldHVybiBbXTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogcmV0cmlldmUgb2ZmZXJzIGluIHBlcmNlbnQgc3RyaW5nIHNhbXBsZSAtNDAlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC8vIHBhcnNlZCBzdHJpbmdcbiAqIEByZXR1cm4ge09GRkVSW119IFtdIGxpc3Qgb2YgcHJpY2VzIGluIGNlbnRzIHdpdGggZGV2aXNlXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IChzdHIpID0+IHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICBjb25zdCByZXNwb25zZSA9IFtdO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGNvbnN0IG9mZmVyUmVnID0gbmV3IFJlZ0V4cChgXFxcXCg/XFxcXC18XFxcXCspKCg/OlxcXFxkKVxcXFwlYCwgJ2cnKTtcbiAgICAgICAgY29uc3Qgb2ZmZXJSZWcgPSBuZXcgUmVnRXhwKGAoXFxcXGQ/XFxcXGQ/KSVgLCAnZycpO1xuICAgICAgICBjb25zdCBoYXNFbnRyaWVzID0gc3RyLm1hdGNoKG9mZmVyUmVnKTtcbiAgICAgICAgaWYgKGhhc0VudHJpZXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgaGFzRW50cmllcykge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogZW50cnkubWF0Y2goL1xcKy9nKSA/ICcrJyA6ICctJyxcbiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBlbnRyeS5tYXRjaCgvXFxkKy9nKSA/IGVudHJ5Lm1hdGNoKC9cXGQrL2cpWzBdIDogMCxcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNlcjogXCIlXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Byb2JhYmx5IGludmFsaWQgcmVndWxhciBleHByZXNzaW9uICcsIGVycik7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9ICh0YXJnZXQpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IFtdO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGltYWdlcyA9IHRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKTtcbiAgICAgICAgZm9yIChjb25zdCBwaWN0dXJlIG9mIGltYWdlcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgZGVzYyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKHBpY3R1cmUuYXR0cmlidXRlc1snYWx0J10pXG4gICAgICAgICAgICAgICAgICAgIGRlc2MgPSBwaWN0dXJlLmF0dHJpYnV0ZXNbJ2FsdCddLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChwaWN0dXJlLmF0dHJpYnV0ZXNbJ3NyYyddKVxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBwaWN0dXJlLmF0dHJpYnV0ZXNbJ3NyYyddLnZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIGdldCBzcmNzZXQgYW5kIGRhdGEtc3Jjc2V0IGlmIGV4aXN0XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVNyY1NldCA9IHBpY3R1cmUuYXR0cmlidXRlc1snZGF0YS1zcmNzZXQnXTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YVNyY1NldCAnLCBkYXRhU3JjU2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVNyY1NldCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcmNTZXRMaXN0ID0gZGF0YVNyY1NldC52YWx1ZS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc3JjU2V0TGlzdCAnLCBzcmNTZXRMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcGl4IG9mIHNyY1NldExpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVyaSA9IHBpeC5zcGxpdCgnICcpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmZpbmRJbmRleChlID0+IGUudXJsID09PSB1cmkpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnB1c2goeyB1cmw6IHVyaSwgZGVzY3JpcHRpb246IFwibm8tZGVzY3JpcHRpb25cIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2RhdGEtc3Jjc2V0XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Jjc2V0ID0gcGljdHVyZS5hdHRyaWJ1dGVzWydzcmNzZXQnXTtcbiAgICAgICAgICAgICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNyY1NldExpc3QgPSBzcmNzZXQudmFsdWUuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcGl4IG9mIHNyY1NldExpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVyaSA9IHBpeC5zcGxpdCgnICcpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmZpbmRJbmRleChlID0+IGUudXJsID09PSB1cmkpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnB1c2goeyB1cmw6IHVyaSwgZGVzY3JpcHRpb246IFwibm8tZGVzY3JpcHRpb25cIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiBpZiAodXJsICYmIHVybCAhPT0gXCJcIilcbiAgICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZignaHR0cCcpID09PSAtMSkgdXJsID0gYGh0dHBzOi8vJHt1cmx9YDsgKi9cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZmluZEluZGV4KGUgPT4gZS51cmwgPT09IHVybCkgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5wdXNoKHsgdXJsOiB1cmwsIGRlc2NyaXB0aW9uOiBkZXNjID8gZGVzYyA6IFwibm8tZGVzY3JpcHRpb25cIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFUlJPUiBpbiBwaWN0dXJlcyBzZWxlY3RvciBsb29wJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRVJST1IgUElDVHVSZSBMSVNUIDo6OiBcIiwgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiByZXRyaWV2ZSBsaXN0IG9mIHByaWNlcyBmcm9tIHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAvLyBwYXJzZWQgc3RyaW5nXG4gKiBAcmV0dXJuIHtQUklDRVtdfSBbXSBsaXN0IG9mIHByaWNlcyBpbiBjZW50cyB3aXRoIGRldmlzZVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldERldmlzZSA9IHZvaWQgMDtcbi8vIGNvbnN0IGRldmlzZXM6IHN0cmluZ1tdID0gW1wiRVVSXCIsIFwiIEVVUlwiLCBcIuKCrFwiLCBcIkVVUk9cIiwgXCJFVVJPU1wiXTtcbmNvbnN0IGRldmlzZXMgPSBbXCJFVVJcIiwgXCIgRVVSXCIsIFwiIOKCrFwiLCBcIuKCrFwiLCBcIuKCrOKAjFwiLCBcIkVVUk9cIiwgXCJFVVJPU1wiLCBcIkFGTlwiLCBcIkFGR0hBTklcIiwgXCJBTExcIiwgXCJMRUtcIiwgXCJEWkRcIiwgXCJBTEdFUklBTiBESU5BUlwiLCBcIlVTRFwiLCBcIlVTIERPTExBUlwiLCBcIiRcIiwgXCJBT0FcIiwgXCJLV0FOWkFcIiwgXCJYQ0RcIiwgXCJFQVNUIENBUklCQkVBTiBET0xMQVJcIiwgXCJBUlNcIiwgXCJBUkdFTlRJTkUgUEVTT1wiLCBcIkFNRFwiLCBcIkFSTUVOSUFOIERSQU1cIiwgXCJBV0dcIiwgXCJBUlVCQU4gRkxPUklOXCIsIFwixpFcIiwgXCJBVURcIiwgXCJBVVNUUkFMSUFOIERPTExBUlwiLCBcIkFaTlwiLCBcIkFaRVJCQUlKQU5JQU4gTUFOQVRcIiwgXCLigrxcIiwgXCJCU0RcIiwgXCJCQUhBTUlBTiBET0xMQVJcIiwgXCJCSERcIiwgXCJCQUhSQUlOSSBESU5BUlwiLCBcIkJEVFwiLCBcIlRBS0FcIiwgXCJCQkRcIiwgXCJCQVJCQURPUyBET0xMQVJcIiwgXCJCWU5cIiwgXCJCRUxBUlVTU0lBTiBSVUJMRVwiLCBcIkJSXCIsIFwiQlpEXCIsIFwiQkVMSVpFIERPTExBUlwiLCBcIkJaXFxcXCRcIiwgXCJYT0ZcIiwgXCJDRkEgRlJBTkMgQkNFQU9cIiwgXCJCTURcIiwgXCJCRVJNVURJQU4gRE9MTEFSXCIsIFwiQlROXCIsIFwiTkdVTFRSVU1cIiwgXCJJTlJcIiwgXCJJTkRJQU4gUlVQRUVcIiwgXCJcIiwgXCJCT0JcIiwgXCJCT0xJVklBTk9cIiwgXCIkQlwiLCBcIkJPVlwiLCBcIk1WRE9MXCIsIFwiQkFNXCIsIFwi2ItcIiwgXCJDT05WRVJUSUJMRSBNQVJLXCIsIFwiS01cIiwgXCJCV1BcIiwgXCJQVUxBXCIsIFwiTk9LXCIsIFwiTk9SV0VHSUFOIEtST05FXCIsIFwiS1JcIiwgXCJCUkxcIiwgXCJCUkFaSUxJQU4gUkVBTFwiLCBcIlJcXFxcJFwiLCBcIkJORFwiLCBcIkJSVU5FSSBET0xMQVJcIiwgXCJCR05cIiwgXCJCVUxHQVJJQU4gTEVWXCIsIFwi0JvQklwiLCBcIkJJRlwiLCBcIkJVUlVOREkgRlJBTkNcIiwgXCJDVkVcIiwgXCJDQUJPIFZFUkRFIEVTQ1VET1wiLCBcIktIUlwiLCBcIlJJRUxcIiwgXCLhn5tcIiwgXCJYQUZcIiwgXCJDRkEgRlJBTkMgQkVBQ1wiLCBcIkNBRFwiLCBcIkNBTkFESUFOIERPTExBUlwiLCBcIktZRFwiLCBcIkNBWU1BTiBJU0xBTkRTIERPTExBUlwiLCBcIkNMRlwiLCBcIlVOSURBRCBERSBGT01FTlRPXCIsIFwiQ0xQXCIsIFwiQ0hJTEVBTiBQRVNPXCIsIFwiQ05ZXCIsIFwiWVVBTiBSRU5NSU5CSVwiLCBcIsKlXCIsIFwiQ09QXCIsIFwiQ09MT01CSUFOIFBFU09cIiwgXCJDT1VcIiwgXCJVTklEQUQgREUgVkFMT1IgUkVBTFwiLCBcIktNRlwiLCBcIkNPTU9STyBGUkFOQ1wiLCBcIkNERlwiLCBcIkNPTkdPTEVTRSBGUkFOQ1wiLCBcIk5aRFwiLCBcIk5FVyBaRUFMQU5EIERPTExBUlwiLCBcIkNSQ1wiLCBcIkNPU1RBIFJJQ0FOIENPTE9OXCIsIFwi4oKhXCIsIFwiSFJLXCIsIFwiS1VOQVwiLCBcIktOXCIsIFwiQ1VDXCIsIFwiUEVTTyBDT05WRVJUSUJMRVwiLCBcIkNVUFwiLCBcIkNVQkFOIFBFU09cIiwgXCLigrFcIiwgXCJBTkdcIiwgXCJORVRIRVJMQU5EUyBBTlRJTExFQU4gR1VJTERFUlwiLCBcIsaRXCIsIFwiQ1pLXCIsIFwiQ1pFQ0ggS09SVU5BXCIsIFwiS8SMXCIsIFwiREtLXCIsIFwiREFOSVNIIEtST05FXCIsIFwiS1JcIiwgXCJESkZcIiwgXCJESklCT1VUSSBGUkFOQ1wiLCBcIkRPUFwiLCBcIkRPTUlOSUNBTiBQRVNPXCIsIFwiUkRcXFxcJFwiLCBcIkVHUFwiLCBcIkVHWVBUSUFOIFBPVU5EXCIsIFwiwqNcIiwgXCJTVkNcIiwgXCJFTCBTQUxWQURPUiBDT0xPTlwiLCBcIkVSTlwiLCBcIk5BS0ZBXCIsIFwiRVRCXCIsIFwiRVRISU9QSUFOIEJJUlJcIiwgXCJGS1BcIiwgXCJGQUxLTEFORCBJU0xBTkRTIFBPVU5EXCIsIFwiwqNcIiwgXCJGSkRcIiwgXCJGSUpJIERPTExBUlwiLCBcIlhQRlwiLCBcIkNGUCBGUkFOQ1wiLCBcIkdNRFwiLCBcIkRBTEFTSVwiLCBcIkdFTFwiLCBcIkxBUklcIiwgXCJHSFNcIiwgXCJHSEFOQSBDRURJXCIsIFwiwqJcIiwgXCJHSVBcIiwgXCJHSUJSQUxUQVIgUE9VTkRcIiwgXCLCo1wiLCBcIkdUUVwiLCBcIlFVRVRaQUxcIiwgXCJRXCIsIFwiR0JQXCIsIFwiUE9VTkQgU1RFUkxJTkdcIiwgXCLCo1wiLCBcIkdORlwiLCBcIkdVSU5FQSBGUkFOQ1wiLCBcIkdZRFwiLCBcIkdVWUFOQSBET0xMQVJcIiwgXCJIVEdcIiwgXCJHT1VSREVcIiwgXCJITkxcIiwgXCJMRU1QSVJBXCIsIFwiTFwiLCBcIkhLRFwiLCBcIkhPTkcgS09ORyBET0xMQVJcIiwgXCJIVUZcIiwgXCJGT1JJTlRcIiwgXCJGVFwiLCBcIklTS1wiLCBcIklDRUxBTkQgS1JPTkFcIiwgXCJLUlwiLCBcIklEUlwiLCBcIlJVUElBSFwiLCBcIlJQXCIsIFwiWERSXCIsIFwiU0RSIChTUEVDSUFMIERSQVdJTkcgUklHSFQpXCIsIFwiSVJSXCIsIFwiSVJBTklBTiBSSUFMXCIsIFwi77e8XCIsIFwiSVFEXCIsIFwiSVJBUUkgRElOQVJcIiwgXCJJTFNcIiwgXCJORVcgSVNSQUVMSSBTSEVRRUxcIiwgXCLigqpcIiwgXCJKTURcIiwgXCJKQU1BSUNBTiBET0xMQVJcIiwgXCJKXFxcXCRcIiwgXCJKUFlcIiwgXCJZRU5cIiwgXCLCpVwiLCBcIkpPRFwiLCBcIkpPUkRBTklBTiBESU5BUlwiLCBcIktaVFwiLCBcIlRFTkdFXCIsIFwi0JvQklwiLCBcIktFU1wiLCBcIktFTllBTiBTSElMTElOR1wiLCBcIktQV1wiLCBcIk5PUlRIIEtPUkVBTiBXT05cIiwgXCLigqlcIiwgXCJLUldcIiwgXCJXT05cIiwgXCLigqlcIiwgXCJLV0RcIiwgXCJLVVdBSVRJIERJTkFSXCIsIFwiS0dTXCIsIFwiU09NXCIsIFwi0JvQklwiLCBcIkxBS1wiLCBcIktJUFwiLCBcIuKCrVwiLCBcIkxCUFwiLCBcIkxFQkFORVNFIFBPVU5EXCIsIFwiwqNcIiwgXCJMU0xcIiwgXCJMT1RJXCIsIFwiWkFSXCIsIFwiUkFORFwiLCBcIlJcIiwgXCJMUkRcIiwgXCJMSUJFUklBTiBET0xMQVJcIiwgXCJMWURcIiwgXCJMSUJZQU4gRElOQVJcIiwgXCJDSEZcIiwgXCJTV0lTUyBGUkFOQ1wiLCBcIk1PUFwiLCBcIlBBVEFDQVwiLCBcIk1HQVwiLCBcIk1BTEFHQVNZIEFSSUFSWVwiLCBcIk1XS1wiLCBcIktXQUNIQVwiLCBcIk1ZUlwiLCBcIk1BTEFZU0lBTiBSSU5HR0lUXCIsIFwiUk1cIiwgXCJNVlJcIiwgXCJSVUZJWUFBXCIsIFwiTVJVXCIsIFwiT1VHVUlZQVwiLCBcIk1VUlwiLCBcIk1BVVJJVElVUyBSVVBFRVwiLCBcIuKCqFwiLCBcIlhVQVwiLCBcIkFEQiBVTklUIE9GIEFDQ09VTlRcIiwgXCJNWE5cIiwgXCJNRVhJQ0FOIFBFU09cIiwgXCJNWFZcIiwgXCJNRVhJQ0FOIFVOSURBRCBERSBJTlZFUlNJT04gKFVESSlcIiwgXCJNRExcIiwgXCJNT0xET1ZBTiBMRVVcIiwgXCJNTlRcIiwgXCJUVUdSSUtcIiwgXCLigq5cIiwgXCJNQURcIiwgXCJNT1JPQ0NBTiBESVJIQU1cIiwgXCJNWk5cIiwgXCJNT1pBTUJJUVVFIE1FVElDQUxcIiwgXCJNVFwiLCBcIk1NS1wiLCBcIktZQVRcIiwgXCJOQURcIiwgXCJOQU1JQklBIERPTExBUlwiLCBcIk5QUlwiLCBcIk5FUEFMRVNFIFJVUEVFXCIsIFwi4oKoXCIsIFwiTklPXCIsIFwiQ09SRE9CQSBPUk9cIiwgXCJDXFxcXCRcIiwgXCJOR05cIiwgXCJOQUlSQVwiLCBcIuKCplwiLCBcIk9NUlwiLCBcIlJJQUwgT01BTklcIiwgXCLvt7xcIiwgXCJQS1JcIiwgXCJQQUtJU1RBTiBSVVBFRVwiLCBcIuKCqFwiLCBcIlBBQlwiLCBcIkJBTEJPQVwiLCBcIkIvLlwiLCBcIlBHS1wiLCBcIktJTkFcIiwgXCJQWUdcIiwgXCJHVUFSQU5JXCIsIFwiR1NcIiwgXCJQRU5cIiwgXCJOVUVWTyBTT0xcIiwgXCJQSFBcIiwgXCJQSElMSVBQSU5FIFBFU09cIiwgXCLigrFcIiwgXCJQTE5cIiwgXCJaTE9UWVwiLCBcIlrFgVwiLCBcIlFBUlwiLCBcIlFBVEFSSSBSSUFMXCIsIFwi77e8XCIsIFwiTUtEXCIsIFwiREVOQVJcIiwgXCLQlNCV0J1cIiwgXCJST05cIiwgXCJST01BTklBTiBMRVVcIiwgXCJMRUlcIiwgXCJSVUJcIiwgXCJSVVNTSUFOIFJVQkxFXCIsIFwi4oK9XCIsIFwiUldGXCIsIFwiUldBTkRBIEZSQU5DXCIsIFwiU0hQXCIsIFwiU0FJTlQgSEVMRU5BIFBPVU5EXCIsIFwiwqNcIiwgXCJXU1RcIiwgXCJUQUxBXCIsIFwiU1ROXCIsIFwiRE9CUkFcIiwgXCJTQVJcIiwgXCJTQVVESSBSSVlBTFwiLCBcIu+3vFwiLCBcIlJTRFwiLCBcIlNFUkJJQU4gRElOQVJcIiwgXCLQlNCY0J0uXCIsIFwiU0NSXCIsIFwiU0VZQ0hFTExFUyBSVVBFRVwiLCBcIuKCqFwiLCBcIlNMTFwiLCBcIkxFT05FXCIsIFwiU0dEXCIsIFwiU0lOR0FQT1JFIERPTExBUlwiLCBcIlhTVVwiLCBcIlNVQ1JFXCIsIFwiU0JEXCIsIFwiU09MT01PTiBJU0xBTkRTIERPTExBUlwiLCBcIlNPU1wiLCBcIlNPTUFMSSBTSElMTElOR1wiLCBcIlNTUFwiLCBcIlNPVVRIIFNVREFORVNFIFBPVU5EXCIsIFwiTEtSXCIsIFwiU1JJIExBTktBIFJVUEVFXCIsIFwi4oKoXCIsIFwiU0RHXCIsIFwiU1VEQU5FU0UgUE9VTkRcIiwgXCJTUkRcIiwgXCJTVVJJTkFNIERPTExBUlwiLCBcIlNaTFwiLCBcIkxJTEFOR0VOSVwiLCBcIlNFS1wiLCBcIlNXRURJU0ggS1JPTkFcIiwgXCJLUlwiLCBcIkNIRVwiLCBcIldJUiBFVVJPXCIsIFwiQ0hXXCIsIFwiV0lSIEZSQU5DXCIsIFwiU1lQXCIsIFwiU1lSSUFOIFBPVU5EXCIsIFwiwqNcIiwgXCJUV0RcIiwgXCJORVcgVEFJV0FOIERPTExBUlwiLCBcIk5UXFxcXCRcIiwgXCJUSlNcIiwgXCJTT01PTklcIiwgXCJUWlNcIiwgXCJUQU5aQU5JQU4gU0hJTExJTkdcIiwgXCJUSEJcIiwgXCJCQUhUXCIsIFwi4Li/XCIsIFwiVE9QXCIsIFwiUEHigJlBTkdBXCIsIFwiVFREXCIsIFwiVFJJTklEQUQgQU5EIFRPQkFHTyBET0xMQVJcIiwgXCJUVFxcXFwkXCIsIFwiVE5EXCIsIFwiVFVOSVNJQU4gRElOQVJcIiwgXCJUUllcIiwgXCJUVVJLSVNIIExJUkFcIiwgXCJcIiwgXCJUTVRcIiwgXCJUVVJLTUVOSVNUQU4gTkVXIE1BTkFUXCIsIFwiVUdYXCIsIFwiVUdBTkRBIFNISUxMSU5HXCIsIFwiVUFIXCIsIFwiSFJZVk5JQVwiLCBcIuKCtFwiLCBcIkFFRFwiLCBcIlVBRSBESVJIQU1cIiwgXCJVU05cIiwgXCJVUyBET0xMQVIgKE5FWFQgREFZKVwiLCBcIlVZSVwiLCBcIlVSVUdVQVkgUEVTTyBFTiBVTklEQURFUyBJTkRFWEFEQVMgKFVSVUlVUlVJKVwiLCBcIlVZVVwiLCBcIlBFU08gVVJVR1VBWU9cIiwgXCIkVVwiLCBcIlVaU1wiLCBcIlVaQkVLSVNUQU4gU1VNXCIsIFwi0JvQklwiLCBcIlZVVlwiLCBcIlZBVFVcIiwgXCJWRUZcIiwgXCJCT0xJVkFSXCIsIFwiQlNcIiwgXCJWTkRcIiwgXCJET05HXCIsIFwi4oKrXCIsIFwiWUVSXCIsIFwiWUVNRU5JIFJJQUxcIiwgXCLvt7xcIiwgXCJaTVdcIiwgXCJaQU1CSUFOIEtXQUNIQVwiLCBcIlpXTFwiLCBcIlpJTUJBQldFIERPTExBUlwiXTtcbmV4cG9ydHMuZGVmYXVsdCA9IChzdHIpID0+IHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvICsvZywgJyAnKS5yZXBsYWNlKC9cXHUyMDBDL2csICcnKS5yZXBsYWNlKC9cXHUwMGEwL2csICcnKTtcbiAgICBsZXQgYWxsUHJpY2VzID0gW107XG4gICAgLy8gdG9kbyB3aGlsZSBicmVhaztcbiAgICBsZXQgbWF0Y2ggPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGRldmlzZSBvZiBkZXZpc2VzKSB7XG4gICAgICAgIGlmICghbWF0Y2ggJiYgZGV2aXNlICYmIGRldmlzZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgLy8gY29uc3QgbWlkZGxlUmVnID0gbmV3IFJlZ0V4cChgXFxcXGQrKFxcXFxbJHtkZXZpc2V9XX0rKVxcXFxkK2AsICdnJyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pZGRsZVJlZyA9IG5ldyBSZWdFeHAoYFxcXFxkKyhcXFxcJHtkZXZpc2V9KylcXFxcZCtgLCAnZycpO1xuICAgICAgICAgICAgICAgIGlmIChzdHIubWF0Y2gobWlkZGxlUmVnKSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGFsbFByaWNlcyA9IGFsbFByaWNlcy5jb25jYXQoc3RyLm1hdGNoKG1pZGRsZVJlZykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRSZWcgPSBuZXcgUmVnRXhwKGBcXFxcJHtkZXZpc2V9KCg/OlxcXFxkfFxcXFwsKSpcXFxcLj9cXFxcZCspYCwgJ2cnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ci5tYXRjaChzdGFydFJlZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFByaWNlcyA9IGFsbFByaWNlcy5jb25jYXQoc3RyLm1hdGNoKHN0YXJ0UmVnKSB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kUmVnID0gbmV3IFJlZ0V4cChgKCg/OlxcXFxkfFxcXFwsKSpcXFxcLj9cXFxcZCspXFxcXCR7ZGV2aXNlfWAsICdnJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHIubWF0Y2goZW5kUmVnKSAmJiAhbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFByaWNlcyA9IGFsbFByaWNlcy5jb25jYXQoc3RyLm1hdGNoKGVuZFJlZykgfHwgW10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwcmljZUxpc3QgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHByaWNlIG9mIGFsbFByaWNlcykge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgICBjb25zdCBzZXBhcmF0b3IgPSBwcmljZS5tYXRjaCgvXFxkKyhcXEQrKVxcZCsvZyk7XG4gICAgICAgIGxldCBpbnRlZ2VyID0gcGFyc2VJbnQocHJpY2UucmVwbGFjZSgvW15cXGRdL2csIFwiXCIpKTtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgY29uc3QgZGV2aXNlID0gcHJpY2UucmVwbGFjZSgvXFwsfFxcLnxcXGQvZywgXCJcIik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yKVxuICAgICAgICAgICAgaW50ZWdlciA9IGludGVnZXIgKiAxMDA7XG4gICAgICAgIGlmIChkZXZpc2UpXG4gICAgICAgICAgICBwcmljZUxpc3QucHVzaCh7IHByaWNlOiBpbnRlZ2VyLCBkZXZpc2U6IGV4cG9ydHMuZ2V0RGV2aXNlKGRldmlzZSkgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcmljZUxpc3RcbiAgICAgICAgLmZpbHRlcigoZSwgaSkgPT4gcHJpY2VMaXN0LmZpbmRJbmRleCh4ID0+IHgucHJpY2UgPT09IGUucHJpY2UgJiYgeC5kZXZpc2UgPT09IGUuZGV2aXNlKSA9PT0gaSlcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEucHJpY2UgLSBiLnByaWNlKTtcbn07XG5leHBvcnRzLmdldERldmlzZSA9IChkZXZpc2UpID0+IHtcbiAgICBpZiAoIWRldmlzZSkge1xuICAgICAgICByZXR1cm4gJ0VVUic7XG4gICAgfVxuICAgIGRldmlzZSA9IGRldmlzZS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIGxldCByZXNwb25zZSA9IGRldmlzZTtcbiAgICBpZiAoT2JqZWN0LmtleXMoY3VycmVuY3kpLmluY2x1ZGVzKGRldmlzZSkpXG4gICAgICAgIHJldHVybiBkZXZpc2U7XG4gICAgZm9yIChjb25zdCBjdXIgb2YgT2JqZWN0LmtleXMoY3VycmVuY3kpKSB7XG4gICAgICAgIGlmIChjdXJyZW5jeVtjdXJdLmluZGV4T2YoZGV2aXNlKSlcbiAgICAgICAgICAgIHJldHVybiBjdXI7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5jb25zdCBjdXJyZW5jeSA9IHtcbiAgICBcIkVVUlwiOiBbXCJFVVJcIiwgXCJFdXJvXCIsIFwiRXVyb3NcIiwgXCLigqxcIl0sXG4gICAgXCJVU0RcIjogW1wiVVNEXCIsIFwiVVMgRG9sbGFyXCIsIFwiJFwiXSxcbiAgICBcIkFGTlwiOiBbXCJBRk5cIiwgXCJBZmdoYW5pXCIsIFwi2ItcIl0sXG4gICAgXCJBTExcIjogW1wiQUxMXCIsIFwiTGVrXCJdLFxuICAgIFwiRFpEXCI6IFtcIkRaRFwiLCBcIkFsZ2VyaWFuIERpbmFyXCJdLFxuICAgIFwiQU9BXCI6IFtcIkFPQVwiLCBcIkt3YW56YVwiXSxcbiAgICBcIlhDRFwiOiBbXCJYQ0RcIiwgXCJFYXN0IENhcmliYmVhbiBEb2xsYXJcIiwgXCIkXCJdLFxuICAgIFwiQVJTXCI6IFtcIkFSU1wiLCBcIkFyZ2VudGluZSBQZXNvXCIsIFwiJFwiXSxcbiAgICBcIkFNRFwiOiBbXCJBTURcIiwgXCJBcm1lbmlhbiBEcmFtXCJdLFxuICAgIFwiQVdHXCI6IFtcIkFXR1wiLCBcIkFydWJhbiBGbG9yaW5cIiwgXCLGklwiXSxcbiAgICBcIkFVRFwiOiBbXCJBVURcIiwgXCJBdXN0cmFsaWFuIERvbGxhclwiLCBcIiRcIl0sXG4gICAgXCJBWk5cIjogW1wiQVpOXCIsIFwiQXplcmJhaWphbmlhbiBNYW5hdFwiLCBcIuKCvFwiXSxcbiAgICBcIkJTRFwiOiBbXCJCU0RcIiwgXCJCYWhhbWlhbiBEb2xsYXJcIiwgXCIkXCJdLFxuICAgIFwiQkhEXCI6IFtcIkJIRFwiLCBcIkJhaHJhaW5pIERpbmFyXCJdLFxuICAgIFwiQkRUXCI6IFtcIkJEVFwiLCBcIlRha2FcIl0sXG4gICAgXCJCQkRcIjogW1wiQkJEXCIsIFwiQmFyYmFkb3MgRG9sbGFyXCIsIFwiJFwiXSxcbiAgICBcIkJZTlwiOiBbXCJCWU5cIiwgXCJCZWxhcnVzc2lhbiBSdWJsZVwiLCBcIkJyXCJdLFxuICAgIFwiQlpEXCI6IFtcIkJaRFwiLCBcIkJlbGl6ZSBEb2xsYXJcIiwgXCJCWiRcIl0sXG4gICAgXCJYT0ZcIjogW1wiWE9GXCIsIFwiQ0ZBIEZyYW5jIEJDRUFPXCJdLFxuICAgIFwiQk1EXCI6IFtcIkJNRFwiLCBcIkJlcm11ZGlhbiBEb2xsYXJcIiwgXCIkXCJdLFxuICAgIFwiQlROXCI6IFtcIkJUTlwiLCBcIk5ndWx0cnVtXCJdLFxuICAgIFwiSU5SXCI6IFtcIklOUlwiLCBcIkluZGlhbiBSdXBlZVwiLCBcIlwiXSxcbiAgICBcIkJPQlwiOiBbXCJCT0JcIiwgXCJCb2xpdmlhbm9cIiwgXCIkYlwiXSxcbiAgICBcIkJPVlwiOiBbXCJCT1ZcIiwgXCJNdmRvbFwiXSxcbiAgICBcIkJBTVwiOiBbXCJCQU1cIiwgXCJDb252ZXJ0aWJsZSBNYXJrXCIsIFwiS01cIl0sXG4gICAgXCJCV1BcIjogW1wiQldQXCIsIFwiUHVsYVwiLCBcIlBcIl0sXG4gICAgXCJOT0tcIjogW1wiTk9LXCIsIFwiTm9yd2VnaWFuIEtyb25lXCIsIFwia3JcIl0sXG4gICAgXCJCUkxcIjogW1wiQlJMXCIsIFwiQnJhemlsaWFuIFJlYWxcIiwgXCJSJFwiXSxcbiAgICBcIkJORFwiOiBbXCJCTkRcIiwgXCJCcnVuZWkgRG9sbGFyXCIsIFwiJFwiXSxcbiAgICBcIkJHTlwiOiBbXCJCR05cIiwgXCJCdWxnYXJpYW4gTGV2XCIsIFwi0LvQslwiXSxcbiAgICBcIkJJRlwiOiBbXCJCSUZcIiwgXCJCdXJ1bmRpIEZyYW5jXCJdLFxuICAgIFwiQ1ZFXCI6IFtcIkNWRVwiLCBcIkNhYm8gVmVyZGUgRXNjdWRvXCJdLFxuICAgIFwiS0hSXCI6IFtcIktIUlwiLCBcIlJpZWxcIiwgXCLhn5tcIl0sXG4gICAgXCJYQUZcIjogW1wiWEFGXCIsIFwiQ0ZBIEZyYW5jIEJFQUNcIl0sXG4gICAgXCJDQURcIjogW1wiQ0FEXCIsIFwiQ2FuYWRpYW4gRG9sbGFyXCIsIFwiJFwiXSxcbiAgICBcIktZRFwiOiBbXCJLWURcIiwgXCJDYXltYW4gSXNsYW5kcyBEb2xsYXJcIiwgXCIkXCJdLFxuICAgIFwiQ0xGXCI6IFtcIkNMRlwiLCBcIlVuaWRhZCBkZSBGb21lbnRvXCJdLFxuICAgIFwiQ0xQXCI6IFtcIkNMUFwiLCBcIkNoaWxlYW4gUGVzb1wiLCBcIiRcIl0sXG4gICAgXCJDTllcIjogW1wiQ05ZXCIsIFwiWXVhbiBSZW5taW5iaVwiLCBcIsKlXCJdLFxuICAgIFwiQ09QXCI6IFtcIkNPUFwiLCBcIkNvbG9tYmlhbiBQZXNvXCIsIFwiJFwiXSxcbiAgICBcIkNPVVwiOiBbXCJDT1VcIiwgXCJVbmlkYWQgZGUgVmFsb3IgUmVhbFwiXSxcbiAgICBcIktNRlwiOiBbXCJLTUZcIiwgXCJDb21vcm8gRnJhbmNcIl0sXG4gICAgXCJDREZcIjogW1wiQ0RGXCIsIFwiQ29uZ29sZXNlIEZyYW5jXCJdLFxuICAgIFwiTlpEXCI6IFtcIk5aRFwiLCBcIk5ldyBaZWFsYW5kIERvbGxhclwiLCBcIiRcIl0sXG4gICAgXCJDUkNcIjogW1wiQ1JDXCIsIFwiQ29zdGEgUmljYW4gQ29sb25cIiwgXCLigqFcIl0sXG4gICAgXCJIUktcIjogW1wiSFJLXCIsIFwiS3VuYVwiLCBcImtuXCJdLFxuICAgIFwiQ1VDXCI6IFtcIkNVQ1wiLCBcIlBlc28gQ29udmVydGlibGVcIl0sXG4gICAgXCJDVVBcIjogW1wiQ1VQXCIsIFwiQ3ViYW4gUGVzb1wiLCBcIuKCsVwiXSxcbiAgICBcIkFOR1wiOiBbXCJBTkdcIiwgXCJOZXRoZXJsYW5kcyBBbnRpbGxlYW4gR3VpbGRlclwiLCBcIsaSXCJdLFxuICAgIFwiQ1pLXCI6IFtcIkNaS1wiLCBcIkN6ZWNoIEtvcnVuYVwiLCBcIkvEjVwiXSxcbiAgICBcIkRLS1wiOiBbXCJES0tcIiwgXCJEYW5pc2ggS3JvbmVcIiwgXCJrclwiXSxcbiAgICBcIkRKRlwiOiBbXCJESkZcIiwgXCJEamlib3V0aSBGcmFuY1wiXSxcbiAgICBcIkRPUFwiOiBbXCJET1BcIiwgXCJEb21pbmljYW4gUGVzb1wiLCBcIlJEJFwiXSxcbiAgICBcIkVHUFwiOiBbXCJFR1BcIiwgXCJFZ3lwdGlhbiBQb3VuZFwiLCBcIsKjXCJdLFxuICAgIFwiU1ZDXCI6IFtcIlNWQ1wiLCBcIkVsIFNhbHZhZG9yIENvbG9uXCIsIFwiJFwiXSxcbiAgICBcIkVSTlwiOiBbXCJFUk5cIiwgXCJOYWtmYVwiXSxcbiAgICBcIkVUQlwiOiBbXCJFVEJcIiwgXCJFdGhpb3BpYW4gQmlyclwiXSxcbiAgICBcIkZLUFwiOiBbXCJGS1BcIiwgXCJGYWxrbGFuZCBJc2xhbmRzIFBvdW5kXCIsIFwiwqNcIl0sXG4gICAgXCJGSkRcIjogW1wiRkpEXCIsIFwiRmlqaSBEb2xsYXJcIiwgXCIkXCJdLFxuICAgIFwiWFBGXCI6IFtcIlhQRlwiLCBcIkNGUCBGcmFuY1wiXSxcbiAgICBcIkdNRFwiOiBbXCJHTURcIiwgXCJEYWxhc2lcIl0sXG4gICAgXCJHRUxcIjogW1wiR0VMXCIsIFwiTGFyaVwiXSxcbiAgICBcIkdIU1wiOiBbXCJHSFNcIiwgXCJHaGFuYSBDZWRpXCIsIFwiwqJcIl0sXG4gICAgXCJHSVBcIjogW1wiR0lQXCIsIFwiR2licmFsdGFyIFBvdW5kXCIsIFwiwqNcIl0sXG4gICAgXCJHVFFcIjogW1wiR1RRXCIsIFwiUXVldHphbFwiLCBcIlFcIl0sXG4gICAgXCJHQlBcIjogW1wiR0JQXCIsIFwiUG91bmQgU3RlcmxpbmdcIiwgXCLCo1wiXSxcbiAgICBcIkdORlwiOiBbXCJHTkZcIiwgXCJHdWluZWEgRnJhbmNcIl0sXG4gICAgXCJHWURcIjogW1wiR1lEXCIsIFwiR3V5YW5hIERvbGxhclwiLCBcIiRcIl0sXG4gICAgXCJIVEdcIjogW1wiSFRHXCIsIFwiR291cmRlXCJdLFxuICAgIFwiSE5MXCI6IFtcIkhOTFwiLCBcIkxlbXBpcmFcIiwgXCJMXCJdLFxuICAgIFwiSEtEXCI6IFtcIkhLRFwiLCBcIkhvbmcgS29uZyBEb2xsYXJcIiwgXCIkXCJdLFxuICAgIFwiSFVGXCI6IFtcIkhVRlwiLCBcIkZvcmludFwiLCBcIkZ0XCJdLFxuICAgIFwiSVNLXCI6IFtcIklTS1wiLCBcIkljZWxhbmQgS3JvbmFcIiwgXCJrclwiXSxcbiAgICBcIklEUlwiOiBbXCJJRFJcIiwgXCJSdXBpYWhcIiwgXCJScFwiXSxcbiAgICBcIlhEUlwiOiBbXCJYRFJcIiwgXCJTRFIgKFNwZWNpYWwgRHJhd2luZyBSaWdodClcIl0sXG4gICAgXCJJUlJcIjogW1wiSVJSXCIsIFwiSXJhbmlhbiBSaWFsXCIsIFwi77e8XCJdLFxuICAgIFwiSVFEXCI6IFtcIklRRFwiLCBcIklyYXFpIERpbmFyXCJdLFxuICAgIFwiSUxTXCI6IFtcIklMU1wiLCBcIk5ldyBJc3JhZWxpIFNoZXFlbFwiLCBcIuKCqlwiXSxcbiAgICBcIkpNRFwiOiBbXCJKTURcIiwgXCJKYW1haWNhbiBEb2xsYXJcIiwgXCJKJFwiXSxcbiAgICBcIkpQWVwiOiBbXCJKUFlcIiwgXCJZZW5cIiwgXCLCpVwiXSxcbiAgICBcIkpPRFwiOiBbXCJKT0RcIiwgXCJKb3JkYW5pYW4gRGluYXJcIl0sXG4gICAgXCJLWlRcIjogW1wiS1pUXCIsIFwiVGVuZ2VcIiwgXCLQu9CyXCJdLFxuICAgIFwiS0VTXCI6IFtcIktFU1wiLCBcIktlbnlhbiBTaGlsbGluZ1wiXSxcbiAgICBcIktQV1wiOiBbXCJLUFdcIiwgXCJOb3J0aCBLb3JlYW4gV29uXCIsIFwi4oKpXCJdLFxuICAgIFwiS1JXXCI6IFtcIktSV1wiLCBcIldvblwiLCBcIuKCqVwiXSxcbiAgICBcIktXRFwiOiBbXCJLV0RcIiwgXCJLdXdhaXRpIERpbmFyXCJdLFxuICAgIFwiS0dTXCI6IFtcIktHU1wiLCBcIlNvbVwiLCBcItC70LJcIl0sXG4gICAgXCJMQUtcIjogW1wiTEFLXCIsIFwiS2lwXCIsIFwi4oKtXCJdLFxuICAgIFwiTEJQXCI6IFtcIkxCUFwiLCBcIkxlYmFuZXNlIFBvdW5kXCIsIFwiwqNcIl0sXG4gICAgXCJMU0xcIjogW1wiTFNMXCIsIFwiTG90aVwiXSxcbiAgICBcIlpBUlwiOiBbXCJaQVJcIiwgXCJSYW5kXCIsIFwiUlwiXSxcbiAgICBcIkxSRFwiOiBbXCJMUkRcIiwgXCJMaWJlcmlhbiBEb2xsYXJcIiwgXCIkXCJdLFxuICAgIFwiTFlEXCI6IFtcIkxZRFwiLCBcIkxpYnlhbiBEaW5hclwiXSxcbiAgICBcIkNIRlwiOiBbXCJDSEZcIiwgXCJTd2lzcyBGcmFuY1wiXSxcbiAgICBcIk1PUFwiOiBbXCJNT1BcIiwgXCJQYXRhY2FcIl0sXG4gICAgXCJNR0FcIjogW1wiTUdBXCIsIFwiTWFsYWdhc3kgQXJpYXJ5XCJdLFxuICAgIFwiTVdLXCI6IFtcIk1XS1wiLCBcIkt3YWNoYVwiXSxcbiAgICBcIk1ZUlwiOiBbXCJNWVJcIiwgXCJNYWxheXNpYW4gUmluZ2dpdFwiLCBcIlJNXCJdLFxuICAgIFwiTVZSXCI6IFtcIk1WUlwiLCBcIlJ1Zml5YWFcIl0sXG4gICAgXCJNUlVcIjogW1wiTVJVXCIsIFwiT3VndWl5YVwiXSxcbiAgICBcIk1VUlwiOiBbXCJNVVJcIiwgXCJNYXVyaXRpdXMgUnVwZWVcIiwgXCLigqhcIl0sXG4gICAgXCJYVUFcIjogW1wiWFVBXCIsIFwiQURCIFVuaXQgb2YgQWNjb3VudFwiXSxcbiAgICBcIk1YTlwiOiBbXCJNWE5cIiwgXCJNZXhpY2FuIFBlc29cIiwgXCIkXCJdLFxuICAgIFwiTVhWXCI6IFtcIk1YVlwiLCBcIk1leGljYW4gVW5pZGFkIGRlIEludmVyc2lvbiAoVURJKVwiXSxcbiAgICBcIk1ETFwiOiBbXCJNRExcIiwgXCJNb2xkb3ZhbiBMZXVcIl0sXG4gICAgXCJNTlRcIjogW1wiTU5UXCIsIFwiVHVncmlrXCIsIFwi4oKuXCJdLFxuICAgIFwiTUFEXCI6IFtcIk1BRFwiLCBcIk1vcm9jY2FuIERpcmhhbVwiXSxcbiAgICBcIk1aTlwiOiBbXCJNWk5cIiwgXCJNb3phbWJpcXVlIE1ldGljYWxcIiwgXCJNVFwiXSxcbiAgICBcIk1NS1wiOiBbXCJNTUtcIiwgXCJLeWF0XCJdLFxuICAgIFwiTkFEXCI6IFtcIk5BRFwiLCBcIk5hbWliaWEgRG9sbGFyXCIsIFwiJFwiXSxcbiAgICBcIk5QUlwiOiBbXCJOUFJcIiwgXCJOZXBhbGVzZSBSdXBlZVwiLCBcIuKCqFwiXSxcbiAgICBcIk5JT1wiOiBbXCJOSU9cIiwgXCJDb3Jkb2JhIE9yb1wiLCBcIkMkXCJdLFxuICAgIFwiTkdOXCI6IFtcIk5HTlwiLCBcIk5haXJhXCIsIFwi4oKmXCJdLFxuICAgIFwiT01SXCI6IFtcIk9NUlwiLCBcIlJpYWwgT21hbmlcIiwgXCLvt7xcIl0sXG4gICAgXCJQS1JcIjogW1wiUEtSXCIsIFwiUGFraXN0YW4gUnVwZWVcIiwgXCLigqhcIl0sXG4gICAgXCJQQUJcIjogW1wiUEFCXCIsIFwiQmFsYm9hXCIsIFwiQi8uXCJdLFxuICAgIFwiUEdLXCI6IFtcIlBHS1wiLCBcIktpbmFcIl0sXG4gICAgXCJQWUdcIjogW1wiUFlHXCIsIFwiR3VhcmFuaVwiLCBcIkdzXCJdLFxuICAgIFwiUEVOXCI6IFtcIlBFTlwiLCBcIk51ZXZvIFNvbFwiLCBcIlMvLlwiXSxcbiAgICBcIlBIUFwiOiBbXCJQSFBcIiwgXCJQaGlsaXBwaW5lIFBlc29cIiwgXCLigrFcIl0sXG4gICAgXCJQTE5cIjogW1wiUExOXCIsIFwiWmxvdHlcIiwgXCJ6xYJcIl0sXG4gICAgXCJRQVJcIjogW1wiUUFSXCIsIFwiUWF0YXJpIFJpYWxcIiwgXCLvt7xcIl0sXG4gICAgXCJNS0RcIjogW1wiTUtEXCIsIFwiRGVuYXJcIiwgXCLQtNC10L1cIl0sXG4gICAgXCJST05cIjogW1wiUk9OXCIsIFwiUm9tYW5pYW4gTGV1XCIsIFwibGVpXCJdLFxuICAgIFwiUlVCXCI6IFtcIlJVQlwiLCBcIlJ1c3NpYW4gUnVibGVcIiwgXCLigr1cIl0sXG4gICAgXCJSV0ZcIjogW1wiUldGXCIsIFwiUndhbmRhIEZyYW5jXCJdLFxuICAgIFwiU0hQXCI6IFtcIlNIUFwiLCBcIlNhaW50IEhlbGVuYSBQb3VuZFwiLCBcIsKjXCJdLFxuICAgIFwiV1NUXCI6IFtcIldTVFwiLCBcIlRhbGFcIl0sXG4gICAgXCJTVE5cIjogW1wiU1ROXCIsIFwiRG9icmFcIl0sXG4gICAgXCJTQVJcIjogW1wiU0FSXCIsIFwiU2F1ZGkgUml5YWxcIiwgXCLvt7xcIl0sXG4gICAgXCJSU0RcIjogW1wiUlNEXCIsIFwiU2VyYmlhbiBEaW5hclwiLCBcItCU0LjQvS5cIl0sXG4gICAgXCJTQ1JcIjogW1wiU0NSXCIsIFwiU2V5Y2hlbGxlcyBSdXBlZVwiLCBcIuKCqFwiXSxcbiAgICBcIlNMTFwiOiBbXCJTTExcIiwgXCJMZW9uZVwiXSxcbiAgICBcIlNHRFwiOiBbXCJTR0RcIiwgXCJTaW5nYXBvcmUgRG9sbGFyXCIsIFwiJFwiXSxcbiAgICBcIlhTVVwiOiBbXCJYU1VcIiwgXCJTdWNyZVwiXSxcbiAgICBcIlNCRFwiOiBbXCJTQkRcIiwgXCJTb2xvbW9uIElzbGFuZHMgRG9sbGFyXCIsIFwiJFwiXSxcbiAgICBcIlNPU1wiOiBbXCJTT1NcIiwgXCJTb21hbGkgU2hpbGxpbmdcIiwgXCJTXCJdLFxuICAgIFwiU1NQXCI6IFtcIlNTUFwiLCBcIlNvdXRoIFN1ZGFuZXNlIFBvdW5kXCJdLFxuICAgIFwiTEtSXCI6IFtcIkxLUlwiLCBcIlNyaSBMYW5rYSBSdXBlZVwiLCBcIuKCqFwiXSxcbiAgICBcIlNER1wiOiBbXCJTREdcIiwgXCJTdWRhbmVzZSBQb3VuZFwiXSxcbiAgICBcIlNSRFwiOiBbXCJTUkRcIiwgXCJTdXJpbmFtIERvbGxhclwiLCBcIiRcIl0sXG4gICAgXCJTWkxcIjogW1wiU1pMXCIsIFwiTGlsYW5nZW5pXCJdLFxuICAgIFwiU0VLXCI6IFtcIlNFS1wiLCBcIlN3ZWRpc2ggS3JvbmFcIiwgXCJrclwiXSxcbiAgICBcIkNIRVwiOiBbXCJDSEVcIiwgXCJXSVIgRXVyb1wiXSxcbiAgICBcIkNIV1wiOiBbXCJDSFdcIiwgXCJXSVIgRnJhbmNcIl0sXG4gICAgXCJTWVBcIjogW1wiU1lQXCIsIFwiU3lyaWFuIFBvdW5kXCIsIFwiwqNcIl0sXG4gICAgXCJUV0RcIjogW1wiVFdEXCIsIFwiTmV3IFRhaXdhbiBEb2xsYXJcIiwgXCJOVCRcIl0sXG4gICAgXCJUSlNcIjogW1wiVEpTXCIsIFwiU29tb25pXCJdLFxuICAgIFwiVFpTXCI6IFtcIlRaU1wiLCBcIlRhbnphbmlhbiBTaGlsbGluZ1wiXSxcbiAgICBcIlRIQlwiOiBbXCJUSEJcIiwgXCJCYWh0XCIsIFwi4Li/XCJdLFxuICAgIFwiVE9QXCI6IFtcIlRPUFwiLCBcIlBh4oCZYW5nYVwiXSxcbiAgICBcIlRURFwiOiBbXCJUVERcIiwgXCJUcmluaWRhZCBhbmQgVG9iYWdvIERvbGxhclwiLCBcIlRUJFwiXSxcbiAgICBcIlRORFwiOiBbXCJUTkRcIiwgXCJUdW5pc2lhbiBEaW5hclwiXSxcbiAgICBcIlRSWVwiOiBbXCJUUllcIiwgXCJUdXJraXNoIExpcmFcIiwgXCJcIl0sXG4gICAgXCJUTVRcIjogW1wiVE1UXCIsIFwiVHVya21lbmlzdGFuIE5ldyBNYW5hdFwiXSxcbiAgICBcIlVHWFwiOiBbXCJVR1hcIiwgXCJVZ2FuZGEgU2hpbGxpbmdcIl0sXG4gICAgXCJVQUhcIjogW1wiVUFIXCIsIFwiSHJ5dm5pYVwiLCBcIuKCtFwiXSxcbiAgICBcIkFFRFwiOiBbXCJBRURcIiwgXCJVQUUgRGlyaGFtXCJdLFxuICAgIFwiVVNOXCI6IFtcIlVTTlwiLCBcIlVTIERvbGxhciAoTmV4dCBkYXkpXCJdLFxuICAgIFwiVVlJXCI6IFtcIlVZSVwiLCBcIlVydWd1YXkgUGVzbyBlbiBVbmlkYWRlcyBJbmRleGFkYXMgKFVSVUlVUlVJKVwiXSxcbiAgICBcIlVZVVwiOiBbXCJVWVVcIiwgXCJQZXNvIFVydWd1YXlvXCIsIFwiJFVcIl0sXG4gICAgXCJVWlNcIjogW1wiVVpTXCIsIFwiVXpiZWtpc3RhbiBTdW1cIiwgXCLQu9CyXCJdLFxuICAgIFwiVlVWXCI6IFtcIlZVVlwiLCBcIlZhdHVcIl0sXG4gICAgXCJWRUZcIjogW1wiVkVGXCIsIFwiQm9saXZhclwiLCBcIkJzXCJdLFxuICAgIFwiVk5EXCI6IFtcIlZORFwiLCBcIkRvbmdcIiwgXCLigqtcIl0sXG4gICAgXCJZRVJcIjogW1wiWUVSXCIsIFwiWWVtZW5pIFJpYWxcIiwgXCLvt7xcIl0sXG4gICAgXCJaTVdcIjogW1wiWk1XXCIsIFwiWmFtYmlhbiBLd2FjaGFcIl0sXG4gICAgXCJaV0xcIjogW1wiWldMXCIsIFwiWmltYmFid2UgRG9sbGFyXCJdXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIHJldHJpZXZlIHN0cmluZyBjbGVhbmVkIGZyb20gZWxlbWVudCBodG1sXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgLy8gZWxlbWVudCB0byBwYXJzZVxuICogQHJldHVybiB7c3RyaW5nfSAvLyByZXRyaWV2ZSBjbGVhbmVkIHN0cmluZ1xuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSAodGFyZ2V0KSA9PiB7XG4gICAgcmV0dXJuIHRhcmdldC5pbm5lclRleHQucmVwbGFjZSgvXFxuL2csICcgJyk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFJldHJpZXZlIHZhbGlkIHNjaGVtYS5vcmcgcHJvZHVjdCBpbmZvcyBmcm9tIEhUTUxFbGVtZW50XG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gdGFyZ2V0IC8vIGVsZW1lbnQgdG8gcGFyc2VcbiAqIEByZXR1cm4ge1BST0RVQ1RTQ0hFTUV9IC8vIHJldHJpZXZlIHNjaGVtYS5vcmcgcHJvZHVjdCBzY2hlbWVcbiAqKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgUHJpY2VQYXJzZXJfMSA9IHJlcXVpcmUoXCIuL1ByaWNlUGFyc2VyXCIpO1xuY29uc3QgQXR0cmlidXRlc18xID0gcmVxdWlyZShcIi4vQXR0cmlidXRlc1wiKTtcbmNvbnN0IEF0dHJpYnV0ZUxpa2VfMSA9IHJlcXVpcmUoXCIuL0F0dHJpYnV0ZUxpa2VcIik7XG5jb25zdCBJdGVtUHJvcHNfMSA9IHJlcXVpcmUoXCIuL0l0ZW1Qcm9wc1wiKTtcbmNvbnN0IE1hdGVyaWFsXzEgPSByZXF1aXJlKFwiLi9NYXRlcmlhbFwiKTtcbmNvbnN0IEdldFVybF8xID0gcmVxdWlyZShcIi4vR2V0VXJsXCIpO1xuY29uc3QgT2ZmZXJzXzEgPSByZXF1aXJlKFwiLi9PZmZlcnNcIik7XG5jb25zdCBQaWN0dXJlc0xpc3RfMSA9IHJlcXVpcmUoXCIuL1BpY3R1cmVzTGlzdFwiKTtcbmNvbnN0IFRvVGV4dF8xID0gcmVxdWlyZShcIi4vVG9UZXh0XCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKHRhcmdldCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7fTtcbiAgICAgICAgbGV0IGltYWdlcyA9IHlpZWxkIFBpY3R1cmVzTGlzdF8xLmRlZmF1bHQodGFyZ2V0KTtcbiAgICAgICAgcmVzcG9uc2UucGljdHVyZXMgPSBpbWFnZXM7XG4gICAgICAgIHJlc3BvbnNlLmltYWdlID0gaW1hZ2VzWzBdID8gaW1hZ2VzWzBdIDoge307XG4gICAgICAgIHJlc3BvbnNlLmRlc2NyaXB0aW9uID0gVG9UZXh0XzEuZGVmYXVsdCh0YXJnZXQpO1xuICAgICAgICByZXNwb25zZS5wcmljZXMgPSBQcmljZVBhcnNlcl8xLmRlZmF1bHQocmVzcG9uc2UuZGVzY3JpcHRpb24pO1xuICAgICAgICByZXNwb25zZS5wcmljZSA9IHJlc3BvbnNlLnByaWNlc1swXSA/IHJlc3BvbnNlLnByaWNlc1swXSA6IHt9O1xuICAgICAgICByZXNwb25zZS5vZmZlcnMgPSBPZmZlcnNfMS5kZWZhdWx0KHJlc3BvbnNlLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgcmVzcG9uc2UudGFncyA9IGltYWdlc1swXSAmJiBpbWFnZXNbMF0udGFncyA/IGltYWdlc1swXS50YWdzIDogW107XG4gICAgICAgIHJlc3BvbnNlLmFkZGl0aW9uYWxQcm9wZXJ0eSA9IEF0dHJpYnV0ZXNfMS5kZWZhdWx0KHRhcmdldCk7XG4gICAgICAgIHJlc3BvbnNlLnNrdSA9IEF0dHJpYnV0ZUxpa2VfMS5kZWZhdWx0KHRhcmdldCwgJ3NrdScpO1xuICAgICAgICByZXNwb25zZS51cmwgPSBHZXRVcmxfMS5kZWZhdWx0KHRhcmdldCk7XG4gICAgICAgIHJlc3BvbnNlLnByb2R1Y3RJRCA9IEF0dHJpYnV0ZUxpa2VfMS5kZWZhdWx0KHRhcmdldCwgJ2lkJyk7XG4gICAgICAgIGNvbnN0IHByb3BzID0gSXRlbVByb3BzXzEuZGVmYXVsdCh0YXJnZXQpO1xuICAgICAgICByZXNwb25zZS5hZGRpdGlvbmFsUHJvcGVydHkgPSBPYmplY3QuYXNzaWduKHJlc3BvbnNlLmFkZGl0aW9uYWxQcm9wZXJ0eSwgcHJvcHMpO1xuICAgICAgICByZXNwb25zZS5tYXRlcmlhbCA9IE1hdGVyaWFsXzEuZGVmYXVsdCh0YXJnZXQpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignU2NoZW1tYU9SRyAnLCBlcnIpO1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=